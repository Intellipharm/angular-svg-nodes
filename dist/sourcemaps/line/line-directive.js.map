{"version":3,"sources":["line/line-directive.js"],"names":["restrict","scope","coords","col_index","row_index","line_index","onRemoveComplete","onMoveLineTargetComplete","onDrawComplete","link","element","ANIM_DURATION","is_initialized","source_coords","target_coords","previous_target_coords","_","parseInt","onMoveLineSourceComplete","removeLineTarget","x","y","TweenLite","to","attr","x2","y2","ease","Power4","easeOut","onComplete","moveLineTarget","moveLineSource","x1","drawLine","y1","should_animate","set","$watch","newValue","oldValue","isUndefined","from","previous_to","console","log"],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAAQ,UALO;IACXA,UAAU;IACVC,OAAO;QACHC,QAA4B;QAC5BC,WAA4B;QAC5BC,WAA4B;QAC5BC,YAA4B;QAC5BC,kBAA4B;QAC5BC,0BAA4B;QAC5BC,gBAA4B;;IAEhCC,MAAM,SAAA,KAAUR,OAAOS,SAAS;;QAE5B,IAAIC,gBAAgB;;QAIpB,IAAIC,iBAAiB;QACrB,IAAIC,gBAAAA,KAAAA;QACJ,IAAIC,gBAAAA,KAAAA;QACJ,IAAIC,yBAAAA,KAAAA;;QAYJ,IAAIT,mBAAmB,SAAnBA,mBAA8B;;YAE9B,IAAID,aAAaW,EAAEC,SAAShB,MAAMI;;YAElCJ,MAAMK,iBAAiB,EAACO,eAAeA,eAAeC,eAAeC,wBAAwBV,YAAYA;;;QAO7G,IAAIE,2BAA2B,SAA3BA,2BAAsC;;YAEtC,IAAIF,aAAaW,EAAEC,SAAShB,MAAMI;;YAElCJ,MAAMM,yBAAyB,EAACM,eAAeA,eAAeC,eAAeA,eAAeT,YAAYA;;;QAO5G,IAAIa,2BAA2B,SAA3BA,2BAAsC;;QAW1C,IAAIV,iBAAiB,SAAjBA,iBAA4B;;YAE5B,IAAIH,aAAaW,EAAEC,SAAShB,MAAMI;;YAElCJ,MAAMO,eAAe,EAACK,eAAeA,eAAeC,eAAeA,eAAeT,YAAYA;;;QAelGJ,MAAMkB,mBAAmB,UAASC,GAAGC,GAAG;;YAIpCC,UAAUC,GAAGb,SAASC,eAAe;gBACjCa,MAAM,EAACC,IAAIL,GAAGM,IAAIL;gBAClBM,MAAMC,OAAOC;gBACbC,YAAYxB;;;;QASpBL,MAAM8B,iBAAiB,UAASX,GAAG;;YAI/BE,UAAUC,GAAGb,SAASC,eAAe;gBACjCa,MAAM,EAACC,IAAIL;gBACXO,MAAMC,OAAOC;gBACbC,YAAYvB;;;;QASpBN,MAAM+B,iBAAiB,UAASZ,GAAG;;YAI/BE,UAAUC,GAAGb,SAASC,eAAe;gBACjCa,MAAM,EAACS,IAAIb;gBACXO,MAAMC,OAAOC;gBACbC,YAAYZ;;;;QAapBjB,MAAMiC,WAAW,UAASD,IAAIE,IAAIV,IAAIC,IAA4B;YAAA,IAAxBU,iBAAwB,UAAA,UAAA,KAAA,UAAA,OAAA,YAAP,QAAO,UAAA;;YAO1Dd,UAAUe,IAAI3B,SAAS,EAACc,MAAM,EAACS,IAAIA,IAAIE,IAAIA,IAAIV,IAAIQ,IAAIP,IAAIS;YAC3Db,UAAUC,GAAGb,SAASC,eAAe;gBACjCa,MAAM,EAACC,IAAIA,IAAIC,IAAIA;gBACnBC,MAAMC,OAAOC;gBACbC,YAAYtB;;;;QAwBxBP,MAAMqC,OAAO,UAAU,UAASC,UAAUC,UAAU;;YAEhD,IAAI,CAACxB,EAAEyB,YAAYF,WAAW;;gBAE1B1B,gBAAgB0B,SAASG;gBACzB5B,gBAAgByB,SAAShB;gBACzBR,yBAAyBwB,SAASI;;gBAGlC,IAAI,CAAC/B,gBAAgB;oBACjBX,MAAMiC,SAASK,SAASN,IAAIM,SAASJ,IAAII,SAASd,IAAIc,SAASb,IAAIa,SAASH;;oBAE5ExB,iBAAiB;uBAIhB,IAAI4B,SAASjB,GAAG,OAAOgB,SAAShB,GAAG,MAAMiB,SAASjB,GAAG,OAAOgB,SAAShB,GAAG,IAAI;wBAC7EtB,MAAM8B,eAAeQ,SAASd;2BAI7B,IAAIe,SAASjB,GAAG,OAAOgB,SAAShB,GAAG,MAAMiB,SAASjB,GAAG,OAAOgB,SAAShB,GAAG,IAAI;4BAC7EtB,MAAMkB,iBAAiBoB,SAASd,IAAIc,SAASb;+BAI5C,IAAIc,SAASjB,GAAG,OAAOgB,SAAShB,GAAG,MAAMiB,SAASjB,GAAG,OAAOgB,SAAShB,GAAG,IAAI;gCAG7E,IAAIgB,SAAShB,GAAG,KAAKiB,SAASjB,GAAG,IAAI;oCACjCtB,MAAMkB,iBAAiBoB,SAASd,IAAIc,SAASb;uCAI5C;wCAEDkB,QAAQC,IAAI;;mCAIf,IAAIL,SAASE,KAAK,OAAOH,SAASG,KAAK,IAAI;oCAC5CzC,MAAM+B,eAAeO,SAASN;;;WAGvC;;EArGT","file":"line/line-directive.js","sourcesContent":["export default {\n    restrict: 'A',\n    scope: {\n        coords:                     \"=angularSvgNodesLineCoords\",\n        col_index:                  \"@angularSvgNodesLineColIndex\",\n        row_index:                  \"@angularSvgNodesLineRowIndex\",\n        line_index:                 \"@angularSvgNodesLineLineIndex\",\n        onRemoveComplete:           \"&angularSvgNodesLineOnRemoveComplete\",\n        onMoveLineTargetComplete:   \"&angularSvgNodesLineonMoveLineTargetComplete\",\n        onDrawComplete:             \"&angularSvgNodesLineOnDrawComplete\"\n    },\n    link: function (scope, element) {\n\n        let ANIM_DURATION = 0.5;\n\n        // control\n\n        let is_initialized = false;\n        let source_coords;\n        let target_coords;\n        let previous_target_coords; // TODO: this feels hacky\n\n        ////////////////////////////////////////////////\n        //\n        // handlers\n        //\n        ////////////////////////////////////////////////\n\n        //----------------------------------\n        // remove complete\n        //----------------------------------\n\n        let onRemoveComplete = function() {\n\n            let line_index = _.parseInt(scope.line_index);\n\n            scope.onRemoveComplete({source_coords: source_coords, target_coords: previous_target_coords, line_index: line_index});\n        };\n\n        //----------------------------------\n        // move line target complete\n        //----------------------------------\n\n        let onMoveLineTargetComplete = function() {\n\n            let line_index = _.parseInt(scope.line_index);\n\n            scope.onMoveLineTargetComplete({source_coords: source_coords, target_coords: target_coords, line_index: line_index});\n        };\n\n        //----------------------------------\n        // move line source complete\n        //----------------------------------\n\n        let onMoveLineSourceComplete = function() {\n\n            // let line_index = _.parseInt(scope.line_index);\n            //\n            // scope.onMoveLineTargetComplete({source_coords: source_coords, target_coords: target_coords, line_index: line_index});\n        };\n\n        //----------------------------------\n        // draw complete\n        //----------------------------------\n\n        let onDrawComplete = function() {\n\n            let line_index = _.parseInt(scope.line_index);\n\n            scope.onDrawComplete({source_coords: source_coords, target_coords: target_coords, line_index: line_index});\n        };\n\n        ////////////////////////////////////////////////\n        //\n        // utils\n        //\n        ////////////////////////////////////////////////\n\n        /**\n         * removeLineTarget\n         *\n         * @param x\n         * @param y\n         */\n        scope.removeLineTarget = function(x, y) {\n\n            // console.log(scope.$id+\" ::: removeLineTarget \"+scope.coords.from[1]+\" \"+scope.coords.from[0]);\n\n            TweenLite.to(element, ANIM_DURATION, {\n                attr: {x2: x, y2: y},\n                ease: Power4.easeOut,\n                onComplete: onRemoveComplete\n            });\n        };\n\n        /**\n         * moveLineTarget\n         *\n         * @param x\n         */\n        scope.moveLineTarget = function(x) {\n\n            // console.log(scope.$id+\" ::: moveLineTarget \"+scope.coords.from[1]+\" \"+scope.coords.from[0]);\n\n            TweenLite.to(element, ANIM_DURATION, {\n                attr: {x2: x},\n                ease: Power4.easeOut,\n                onComplete: onMoveLineTargetComplete\n            });\n        };\n\n        /**\n         * moveLineSource\n         *\n         * @param x\n         */\n        scope.moveLineSource = function(x) {\n\n            // console.log(scope.$id+\" ::: moveLineSource \"+scope.coords.from[1]+\" \"+scope.coords.from[0]);\n\n            TweenLite.to(element, ANIM_DURATION, {\n                attr: {x1: x},\n                ease: Power4.easeOut,\n                onComplete: onMoveLineSourceComplete\n            });\n        };\n\n        /**\n         * drawLine\n         *\n         * @param x1\n         * @param y1\n         * @param x2\n         * @param y2\n         * @param should_animate\n         */\n        scope.drawLine = function(x1, y1, x2, y2, should_animate = false) {\n\n            // console.log(scope.$id+\" ::: drawLine \"+scope.coords.from[1]+\" \"+scope.coords.from[0]+\" \"+should_animate);\n\n            // draw with animation\n\n            // if (should_animate) {\n                TweenLite.set(element, {attr: {x1: x1, y1: y1, x2: x1, y2: y1}});\n                TweenLite.to(element, ANIM_DURATION, {\n                    attr: {x2: x2, y2: y2},\n                    ease: Power4.easeOut,\n                    onComplete: onDrawComplete\n                });\n            //     return;\n            // }\n            //\n            // // draw without animation\n            //\n            // TweenLite.set(element, {attr: {x1: x1, y1: y1, x2: x2, y2: y2}});\n            // window.setTimeout(onDrawComplete.bind(this), 1); // hack because external handler does $s.$apply TODO: remove when we can remove handler $s.$apply\n        };\n\n        ////////////////////////////////////////////////\n        //\n        // watchers\n        //\n        ////////////////////////////////////////////////\n\n        // scope.$watch('coords.active', function(newValue, oldValue) {\n        //\n        //     console.log(_.cloneDeep(newValue));\n        //     console.log(_.cloneDeep(oldValue));\n        //     console.log(\"----------------------------\");\n        // }, true);\n\n        scope.$watch('coords', function(newValue, oldValue) {\n\n            if (!_.isUndefined(newValue)) {\n\n                source_coords = newValue.from;\n                target_coords = newValue.to;\n                previous_target_coords = newValue.previous_to;\n\n                // init\n                if (!is_initialized) {\n                    scope.drawLine(newValue.x1, newValue.y1, newValue.x2, newValue.y2, newValue.should_animate);\n                    // newValue.should_animate = false;\n                    is_initialized = true;\n                }\n\n                // if only target col coord has changed\n                else if (oldValue.to[1] === newValue.to[1] && oldValue.to[0] !== newValue.to[0]) {\n                    scope.moveLineTarget(newValue.x2);\n                }\n\n                // if only target row coord has changed\n                else if (oldValue.to[0] === newValue.to[0] && oldValue.to[1] !== newValue.to[1]) {\n                    scope.removeLineTarget(newValue.x2, newValue.y2);\n                }\n\n                // if col & row change\n                else if (oldValue.to[1] !== newValue.to[1] && oldValue.to[0] !== newValue.to[0]) {\n\n                    // row decrease\n                    if (newValue.to[1] < oldValue.to[1]) {\n                        scope.removeLineTarget(newValue.x2, newValue.y2);\n                    }\n\n                    // row increase\n                    else {\n                        // ???\n                        console.log(\"row increase\");\n                    }\n                }\n                // if source col change\n                else if (oldValue.from[0] !== newValue.from[0]) {\n                    scope.moveLineSource(newValue.x1);\n                }\n            }\n        }, true);\n\n    }\n};"],"sourceRoot":"src/app/*.js"}