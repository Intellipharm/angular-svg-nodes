{"version":3,"sources":["angular-svg-nodes-directive-d3.js"],"names":["d3","NodeUtils","calculateColX","index","config","first_col_width","node_width","col_spacing","col_width","calculateColWidth","total_item_width","restrict","scope","api","config_node_width","config_node_height","config_col_spacing","config_disable_control_nodes","config_highlight_node_on","config_initial_grid_cols","config_initial_grid_rows","config_label_spacing","config_max_viewport_width_increase","config_max_viewport_height_increase","config_new_node_label","config_row_spacing","initial_state","controller","controllerAs","bindToController","template","link","element","attrs","_config","new_node_label","isUndefined","initial_grid_cols","initial_grid_rows","highlight_node_on","node_height","row_spacing","label_spacing","disable_control_nodes","max_viewport_width_increase","max_viewport_height_increase","_cols","_rows","_total_item_width","_total_item_height","_viewport_width","_viewport_height","wrapper_style","_wrapper","select","append","attr","style","_grid_col_count","map","Array","bgcol","bgcoli","_x","_width","_bg_col_svg","_bg_col_rect_svg","row","rowi","_row_svg","columns","col","coli","_col_svg","_line_source_lock_coords","getNodeCoords","connections","line","linei","_line_target_coords","_line_target_lock_coords","_line","transition","delay","duration","_top_left_coords","_node"],"mappings":"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","file":"angular-svg-nodes-directive-d3.js","sourcesContent":["import * as d3 from 'd3';\nimport _ from 'lodash';\n\n// local: constants\nimport {\n    HIGHLIGHT_NODE_ON_SELECT,\n    HIGHLIGHT_NODE_ON_DESELECT,\n    HIGHLIGHT_NODE_ON_ADD,\n    DEFAULT_HIGHLIGHT_NODE_ON,\n    DEFAULT_INITIAL_GRID_COLS,\n    DEFAULT_INITIAL_GRID_ROWS,\n    DEFAULT_NODE_WIDTH,\n    DEFAULT_NODE_HEIGHT,\n    DEFAULT_COL_SPACING,\n    DEFAULT_ROW_SPACING,\n    DEFAULT_LABEL_SPACING,\n    DEFAULT_DISABLE_CONTROL_NODES,\n    DEFAULT_MAX_VIEWPORT_WIDTH_INCREASE,\n    DEFAULT_MAX_VIEWPORT_HEIGHT_INCREASE\n} from \"./angular-svg-nodes-settings\";\nimport {\n    NODE_TOP_LEFT,\n    NODE_TOP,\n    NODE_CENTER,\n    NODE_BOTTOM,\n    DEFAULT_NEW_NODE_LABEL\n} from \"./node/node-settings\";\n\n// local: services\nimport * as NodeUtils from './node/node-utils';\n\nfunction calculateColX(index, config) {\n    if (index === 0) {\n        return 0;\n    }\n    let first_col_width = config.node_width + (config.col_spacing / 2);\n    let col_width = config.node_width + (config.col_spacing);\n    return first_col_width + ((index - 1) * col_width);\n}\n\nfunction calculateColWidth(index, config) {\n    let total_item_width = index === 0 ? config.node_width + (config.col_spacing / 2) : config.node_width + config.col_spacing;\n    return total_item_width;\n}\n\nexport default {\n    restrict: 'E',\n    scope: {\n        api:                                    \"<?\",\n        config_node_width:                      \"<?nodeWidth\",\n        config_node_height:                     \"<?nodeHeight\",\n        config_col_spacing:                     \"<?colSpacing\",\n        config_disable_control_nodes:           \"<?disableControlNodes\",\n        config_highlight_node_on:               \"<?highlightNodeOn\",\n        config_initial_grid_cols:               \"<?initialGridCols\",\n        config_initial_grid_rows:               \"<?initialGridRows\",\n        config_label_spacing:                   \"<?labelSpacing\",\n        config_max_viewport_width_increase:     \"<?maxViewportWidthIncrease\",\n        config_max_viewport_height_increase:    \"<?maxViewportHeightIncrease\",\n        config_new_node_label:                  \"<?newNodeLabel\",\n        config_row_spacing:                     \"<?rowSpacing\",\n        initial_state:                          \"<?initialState\"\n    },\n    controller: () => {\n\n    },\n    controllerAs:       \"AngularSvgNodesD3\",\n    bindToController:   true,\n    template: '<div id=\"angular-svg-nodes-wrapper\" class=\"angular-svg-nodes-wrapper\" ng-style=\"AngularSvgNodes.wrapper_style\">',\n    link: (scope, element, attrs, controller) => {\n\n        let _config = {\n            new_node_label:                 !_.isUndefined(controller.config_new_node_label) ? controller.config_new_node_label : \"NEW NODE\",\n            initial_grid_cols:              !_.isUndefined(controller.config_initial_grid_cols) ? controller.config_initial_grid_cols : DEFAULT_INITIAL_GRID_COLS,\n            initial_grid_rows:              !_.isUndefined(controller.config_initial_grid_rows) ? controller.config_initial_grid_rows : DEFAULT_INITIAL_GRID_ROWS,\n            highlight_node_on:              !_.isUndefined(controller.config_highlight_node_on) ? controller.config_highlight_node_on : DEFAULT_HIGHLIGHT_NODE_ON,\n            node_width:                     !_.isUndefined(controller.config_node_width) ? controller.config_node_width : DEFAULT_NODE_WIDTH,\n            node_height:                    !_.isUndefined(controller.config_node_height) ? controller.config_node_height : DEFAULT_NODE_HEIGHT,\n            col_spacing:                    !_.isUndefined(controller.config_col_spacing) ? controller.config_col_spacing : DEFAULT_COL_SPACING,\n            row_spacing:                    !_.isUndefined(controller.config_row_spacing) ? controller.config_row_spacing : DEFAULT_ROW_SPACING,\n            label_spacing:                  !_.isUndefined(controller.config_label_spacing) ? controller.config_label_spacing : DEFAULT_LABEL_SPACING,\n            disable_control_nodes:          !_.isUndefined(controller.config_disable_control_nodes) ? controller.config_disable_control_nodes : DEFAULT_DISABLE_CONTROL_NODES,\n            max_viewport_width_increase:    !_.isUndefined(controller.config_max_viewport_width_increase) ? controller.config_max_viewport_width_increase : DEFAULT_MAX_VIEWPORT_WIDTH_INCREASE,\n            max_viewport_height_increase:   !_.isUndefined(controller.config_max_viewport_height_increase) ? controller.config_max_viewport_height_increase : DEFAULT_MAX_VIEWPORT_HEIGHT_INCREASE\n        };\n\n        let _cols = _config.initial_grid_cols;\n        let _rows = 4;//_config.initial_grid_rows;\n\n        let _total_item_width = _config.node_width + _config.col_spacing;\n        let _total_item_height = _config.node_height + _config.row_spacing;\n\n        let _viewport_width = _total_item_width * _cols;\n        let _viewport_height = _total_item_height * _rows;\n\n        controller.wrapper_style = {\n            'max-width': (_viewport_width + _config.max_viewport_width_increase) + \"px\",\n            'min-width': _viewport_width + \"px\",\n            'max-height': (_viewport_height + (_config.max_viewport_height_increase * _rows)) + \"px\",\n            'min-height': _viewport_height + \"px\"\n        };\n\n        // var _wrapper = d3.select(element[0]) // TODO: do this when we can remove wrapper\n        var _wrapper = d3.select(\"#angular-svg-nodes-wrapper\")\n            .append(\"svg:svg\")\n            .attr(\"version\", \"1.1\")\n            .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \" 0 0 \" + _viewport_width + \" \" + _viewport_height)\n            .attr(\"width\", \"100%\")\n            .style(\"stroke\", \"rgb(6,120,155)\")\n            .style(\"background-color\", \"#ccc\")\n            .style(\"min-width\", _viewport_width + \"px\")\n            .style(\"min-height\", _viewport_height + \"px\");\n\n        let _grid_col_count = 4;\n\n        // bg column grid\n\n        _.map(new Array(_grid_col_count), (bgcol, bgcoli) => {\n\n            let _x = calculateColX(bgcoli, _config);\n            let _width = calculateColWidth(bgcoli, _config);\n\n            let _bg_col_svg = _wrapper.append(\"svg:svg\");\n\n            let _bg_col_rect_svg = _bg_col_svg.append(\"svg:rect\")\n                .attr(\"x\", _x)\n                .attr(\"y\", 0)\n                .attr(\"width\", _width)\n                .attr(\"height\", \"100%\")\n                .attr(\"class\", \"angular-svg-nodes-bg-col-grid-col\");\n        });\n\n        // rows\n\n        _.map(controller.initial_state, (row, rowi) => {\n\n            let _row_svg = _wrapper.append(\"svg:svg\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 0);\n\n            // columns\n\n            _.map(row.columns, (col, coli) => {\n\n                let _col_svg = _row_svg.append(\"svg:svg\")\n                    .attr(\"class\", \"angular-svg-nodes-col\");\n\n                // lines\n\n                let _line_source_lock_coords = NodeUtils.getNodeCoords(rowi, coli, NODE_BOTTOM, _config);\n\n                _.map(col.connections, (line, linei) => {\n\n                    let _line_target_coords = [ linei, rowi + 1 ];\n                    let _line_target_lock_coords = NodeUtils.getNodeCoords(_line_target_coords[1], _line_target_coords[0], NODE_TOP, _config);\n\n                    let _line = _col_svg.append(\"svg:line\")\n                        .attr(\"x1\", _line_source_lock_coords[0])\n                        .attr(\"y1\", _line_source_lock_coords[1])\n                        .attr(\"x2\", _line_source_lock_coords[0])\n                        .attr(\"y2\", _line_source_lock_coords[1])\n                        .attr(\"class\", \"angular-svg-nodes-line\")\n                        .style(\"stroke\", \"red\")\n                        .style(\"stroke-width\", 1)\n                        .style(\"stroke-dasharray\", 0)\n                        .transition()\n                        .delay(1)\n                        .attr(\"x2\", _line_target_lock_coords[0])\n                        .attr(\"y2\", _line_target_lock_coords[1])\n                        .duration(1000);\n                });\n\n                // node\n\n                let _top_left_coords = NodeUtils.getNodeCoords(rowi, coli, NODE_TOP_LEFT, _config);\n\n                let _node = _col_svg.append(\"svg:rect\")\n                    .attr(\"x\", _top_left_coords[0])\n                    .attr(\"y\", _top_left_coords[1])\n                    .attr(\"width\", _config.node_width)\n                    .attr(\"height\", _config.node_height)\n                    .attr(\"class\", \"angular-svg-nodes-node\");\n            });\n        });\n    }\n};"],"sourceRoot":"src/app/*.js"}