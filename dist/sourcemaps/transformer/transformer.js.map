{"version":3,"sources":["transformer/transformer.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QASgB,cAAA;AARhB,QA6DgB,eAAA;AA5DhB,QAuGgB,uBAAA;;AA9GhB,IAAA,UAAA,QAAA;;AAWA,IAAI,WAAW,uBAAuB;;AATtC,IAAA,YAAA,QAAA;;AAaA,IAAI,aAAa,uBAAuB;;AAZxC,IAAA,aAAA,QAAA;;AAgBA,IAAI,cAAc,uBAAuB;;AAfzC,IAAA,0BAAA,QAAA;;AAmBA,IAAI,2BAA2B,uBAAuB;;AAEtD,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AAEvF,SAAS,mBAAmB,KAAK,EAAE,IAAI,MAAM,QAAQ,MAAM,EAAE,KAAK,IAAI,IAAI,GAAG,OAAO,MAAM,IAAI,SAAS,IAAI,IAAI,QAAQ,KAAK,EAAE,KAAK,KAAK,IAAI,MAAM,OAAO,aAAa,EAAE,OAAO,MAAM,KAAK;;AAbnL,SAAS,YAAY,MAAwD;IAAA,IAAA,QAAA;;IAAA,IAAlD,SAAkD,UAAA,UAAA,KAAA,UAAA,OAAA,YAAzC,IAAA,yBAAA,QAAoC,MAAK,UAAA;;;IAEhF,IAAI,EAAE,kBAAA,yBAAA,UAAoD;QACtD,QAAQ,MAAM;QACd,OAAO;;;IAIX,IAAI,QAAQ,SAAA,QAAE,QAAQ,MAAM,OAAO;;IAEnC,OAAO,SAAA,QAAE,OAAO,OAAO,UAAC,QAAQ,KAAK,MAAS;;QAE1C,IAAI,QAAQ,SAAA,QAAE,SAAS;;QAGvB,IAAI,OAAO,SAAA,QAAE,OAAO,KAAK,UAAC,KAAD;YAAA,OAAS,IAAK,OAAO;;;QAG9C,IAAI,UAAU,SAAA,QAAE,IAAI,MAAM,UAAC,KAAK,MAAS;;YAErC,IAAI,QAAQ,SAAA,QAAE,SAAS;;YAGvB,IAAI,UAAU,GAAG;gBACb,OAAQ,QAAQ,KAAM,MAAK,aAAa,MAAM,OAAQ,QAAQ,IAAK,IAAK,OAAO,mBAAoB,OAAO;;;YAG9G,IAAI,KAAK,IAAA,YAAA,QAAmB;gBACxB,OAAO,IAAK,OAAO;;;YAGvB,OAAO;WAER;;QAGH,OAAA,GAAA,OAAA,mBACO,SACA,CAAE,IAAA,WAAA,QAAsB,EAAE,SAAA;OAElC;CACN;;AAYM,SAAS,aAAa,MAAM,KAAK,YAAY,kBAAoE;IAAA,IAAlD,SAAkD,UAAA,UAAA,KAAA,UAAA,OAAA,YAAzC,IAAA,yBAAA,QAAoC,MAAK,UAAA;;;IAEpH,IAAI,EAAE,eAAA,WAAA,UAAmC;QACrC,QAAQ,MAAM;QACd,OAAO;;;IAGX,IAAI,EAAE,kBAAA,yBAAA,UAAoD;QACtD,QAAQ,MAAM;QACd,OAAO;;;IAIX,IAAI,sBAAsB,KAAK,qBAAqB,MAAM,YAAY,OAAO;;IAE7E,IAAI,UAAU,SAAA,QAAE,IAAI,IAAI,SAAS,UAAC,KAAK,MAAS;;QAE5C,IAAI,SAAA,QAAE,SAAS,qBAAqB,OAAO;;YAEvC,IAAI,OAAA,GAAA,OAAA,mBACG,IAAI,OACJ,CAAE;;YAGT,IAAI,aAAa,OAAO,OAAO,IAAI,KAAK,EAAE,MAAA;;YAE1C,OAAO,IAAA,YAAA,QAAoB;;QAE/B,OAAO;;;IAGX,OAAO,IAAA,WAAA,QAAsB,EAAE,SAAA;;;AAY5B,SAAS,qBAAqB,MAAM,KAAK,KAAK;;IAEjD,OAAO,SAAA,QAAE,OAAO,MAAM,UAAC,QAAQ,MAAS;QACpC,IAAI,SAAA,QAAE,IAAI,MAAM,SAAS,SAAA,QAAE,IAAI,MAAM,QAAQ,SAAA,QAAE,SAAS,KAAK,KAAK,KAAK;YACnE,SAAA,GAAA,OAAA,mBACO,SACA,CAAE,KAAM;;QAGnB,OAAO;OACR;CACN","file":"transformer/transformer.js","sourcesContent":["import _ from \"lodash\";\n\nimport AngularSvgNodeRow from '../row/row-model';\nimport AngularSvgNode from '../node/node-model';\nimport AngularSvgNodeTransformerConfig from './transformer-config-model';\n\n/**\n * transformIn\n * transforms compatible database data for use as AngularSvgNodes initial state data\n *\n * @param data\n * @param config\n * @returns {*}\n */\nexport function transformIn(data, config = new AngularSvgNodeTransformerConfig({})) {\n\n    if (!(config instanceof AngularSvgNodeTransformerConfig)) {\n        console.error(\"AngularSvgNodes Error: invalid config provided to transformIn, must be instance of AngularSvgNodeTransformerConfig\");\n        return false;\n    }\n\n    // group into rows (using row index field)\n    let _rows = _.groupBy(data, config.row_index_field);\n\n    return _.reduce(_rows, (result, row, rowi) => {\n\n        let _rowi = _.parseInt(rowi);\n\n        // sort row data (using col index field)\n        let _row = _.sortBy(row, (col) => col[ config.col_index_field ]);\n\n        // create columns array\n        let columns = _.map(_row, (col, coli) => {\n\n            let _coli = _.parseInt(coli);\n\n            // update parent columns with connections\n            if (_rowi !== 0) {\n                result[ _rowi - 1 ] = this.transformRow(data, result[ _rowi - 1 ], col[ config.connection_field ], _coli, config);\n            }\n\n            let _r = new AngularSvgNode({\n                label: col[ config.label_field ]\n            });\n\n            return _r;\n\n        }, result);\n\n        // append new AngularSvgNodeRow to result\n        return [\n            ...result,\n            ...[ new AngularSvgNodeRow({ columns }) ]\n        ];\n    }, []);\n};\n\n/**\n * transformRow\n * returns new AngularSvgNodeRow with updated column joins by appending source_col_index to columns that match target_ids\n *\n * @param data (the database data we will use to find target col index using target_ids)\n * @param row (the row we are updating)\n * @param target_ids (the database ids of the target nodes that the source node is connecting to)\n * @param source_col_index (the col index of the source node)\n * @param config\n */\nexport function transformRow(data, row, target_ids, source_col_index, config = new AngularSvgNodeTransformerConfig({})) {\n\n    if (!(row instanceof AngularSvgNodeRow)) {\n        console.error(\"AngularSvgNodes Error: invalid row provided to setRowConnections, must be instance of AngularSvgNodeRow\");\n        return false;\n    }\n\n    if (!(config instanceof AngularSvgNodeTransformerConfig)) {\n        console.error(\"AngularSvgNodes Error: invalid config provided to transformIn, must be instance of AngularSvgNodeTransformerConfig\");\n        return false;\n    }\n\n    // get col indices of target nodes by ids\n    let _target_col_indices = this.getValuesForKeyByIds(data, target_ids, config.col_index_field);\n\n    let columns = _.map(row.columns, (col, coli) => {\n\n        if (_.includes(_target_col_indices, coli)) {\n\n            let join = [\n                ...col.join,\n                ...[ source_col_index ]\n            ];\n\n            let _node_data = Object.assign({}, col, { join } );\n\n            return new AngularSvgNode( _node_data );\n        }\n        return col;\n    });\n\n    return new AngularSvgNodeRow({ columns });\n}\n\n/**\n * getValuesForKeyByIds\n * returns an array of values for given key, for each item whose id is in given ids array\n *\n * @param data\n * @param ids\n * @param key\n * @returns {Array}\n */\nexport function getValuesForKeyByIds(data, ids, key) {\n\n    return _.reduce(data, (result, item) => {\n        if (_.has(item, 'id') && _.has(item, key) && _.includes(ids, item.id)) {\n            result = [\n                ...result,\n                ...[ item[ key ] ]\n            ];\n        }\n        return result;\n    }, []);\n}"],"sourceRoot":"src/app/*.js"}