{"version":3,"sources":["angular-svg-nodes-transformer.js"],"names":["transformIn","transformRow","Utils","data","config","console","error","_rows","groupBy","row_index_field","reduce","result","row","rowi","_rowi","parseInt","_row","sortBy","col","col_index_field","columns","map","coli","_coli","connection_field","_result","label","label_field","target_ids","source_col_index","_target_col_indices","getValuesForKeyByIds","includes","connections","_node_data","Object","assign"],"mappings":"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","file":"angular-svg-nodes-transformer.js","sourcesContent":["import _ from \"lodash\";\n\n// local: models\nimport AngularSvgNodeRow from './row/row-model';\nimport AngularSvgNode from './node/node-model';\nimport AngularSvgNodeTransformerConfig from './transformer-config/transformer-config-model';\n\n// local: services\nimport * as Utils from './angular-svg-nodes-utils';\n\n/**\n * transforms compatible database data for use as AngularSvgNodes initial state data\n *\n * @param data\n * @param config\n * @returns {*} \n */\nexport function transformIn(data, config = new AngularSvgNodeTransformerConfig({})) {\n\n    if (!(config instanceof AngularSvgNodeTransformerConfig)) {\n        console.error(\"AngularSvgNodes Error: invalid config provided to transformIn, must be instance of AngularSvgNodeTransformerConfig\");\n        return false;\n    }\n\n    // group into rows (using row index field)\n    let _rows = _.groupBy(data, config.row_index_field);\n\n    return _.reduce(_rows, (result, row, rowi) => {\n\n        let _rowi = _.parseInt(rowi);\n\n        // sort row data (using col index field)\n        let _row = _.sortBy(row, (col) => col[ config.col_index_field ]);\n\n        // create columns array\n        let columns = _.map(_row, (col, coli) => {\n\n            let _coli = _.parseInt(coli);\n\n            // update parent columns with connections\n            if (_rowi !== 0) {\n                result[ _rowi - 1 ] = this.transformRow(data, result[ _rowi - 1 ], col[ config.connection_field ], _coli, config);\n            }\n\n            let _result = new AngularSvgNode({\n                label: col[ config.label_field ]\n            });\n\n            return _result;\n\n        }, result);\n\n        // append new AngularSvgNodeRow to result\n        return [\n            ...result,\n            ...[ new AngularSvgNodeRow({ columns }) ]\n        ];\n    }, []);\n}\n\n/**\n * returns new AngularSvgNodeRow with updated column connections by appending source_col_index to columns that match target_ids\n *\n * @param data (the database data we will use to find target col index using target_ids)\n * @param row (the row we are updating)\n * @param target_ids (the database ids of the target nodes that the source node is connecting to)\n * @param source_col_index (the col index of the source node)\n * @param config\n */\nexport function transformRow(data, row, target_ids, source_col_index, config = new AngularSvgNodeTransformerConfig({})) {\n\n    if (!(row instanceof AngularSvgNodeRow)) {\n        console.error(\"AngularSvgNodes Error: invalid row provided to setRowConnections, must be instance of AngularSvgNodeRow\");\n        return false;\n    }\n\n    if (!(config instanceof AngularSvgNodeTransformerConfig)) {\n        console.error(\"AngularSvgNodes Error: invalid config provided to transformIn, must be instance of AngularSvgNodeTransformerConfig\");\n        return false;\n    }\n\n    // get col indices of target nodes by ids\n    let _target_col_indices = Utils.getValuesForKeyByIds(data, target_ids, config.col_index_field);\n\n    let columns = _.map(row.columns, (col, coli) => {\n\n        if (_.includes(_target_col_indices, coli)) {\n\n            let connections = [\n                ...col.connections,\n                ...[ source_col_index ]\n            ];\n\n            let _node_data = Object.assign({}, col, { connections } );\n\n            return new AngularSvgNode( _node_data );\n        }\n        return col;\n    });\n\n    return new AngularSvgNodeRow({ columns });\n}"],"sourceRoot":"src/app/*.js"}