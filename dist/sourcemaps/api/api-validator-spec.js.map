{"version":3,"sources":["api/api-validator-spec.js"],"names":[],"mappings":"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","file":"api/api-validator-spec.js","sourcesContent":["// local: models\nimport AngularSvgNodeRow from '../row/row-model';\nimport AngularSvgNode from '../node/node-model';\n\n// SUT\nimport * as Validator from './api-validator';\n\ndescribe(\"API Validator\", () => {\n\n    //------------------------------------------------------------\n    // areApiConnectionsValid\n    //------------------------------------------------------------\n\n    describe(\"areApiConnectionsValid\", () => {\n\n        it(\"should return false and log error if nodes data only has 1 row\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 0;\n            let _connections = [];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_NODES_DATA);\n        });\n\n        it(\"should return false and log error if row index is last row\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 1;\n            let _connections = [];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_ROW_INDEX);\n        });\n\n        it(\"should return true if all params are valid and no connections are provided\", () => {\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 0;\n            let _connections = [];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(true);\n        });\n\n        it(\"should return false and log an error if a connection is invalid (greater than last non control node)\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 0;\n            let _connections = [\n                0, // valid\n                1 // invalid\n            ];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_CONNECTIONS);\n        });\n\n        it(\"should return true if connections are all valid (less than or equal to last non control node)\", () => {\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 0;\n            let _connections = [\n                0 // valid\n            ];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(true);\n        });\n    });\n\n    //------------------------------------------------------------\n    // areApiCoordsValid\n    //------------------------------------------------------------\n\n    describe(\"areApiCoordsValid\", () => {\n\n        it(\"should return false and log error if row index param is invalid\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 1;\n            let _col_index = 0;\n\n            let _result = Validator.areApiCoordsValid(_nodes, _row_index, _col_index);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_ROW_INDEX);\n        });\n\n        it(\"should return false and log error if column index param is invalid\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 0;\n            let _col_index = 1;\n\n            let _result = Validator.areApiCoordsValid(_nodes, _row_index, _col_index);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n        });\n\n        it(\"should return true if row & column index params are valid\", () => {\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 0;\n            let _col_index = 0;\n\n            let _result = Validator.areApiCoordsValid(_nodes, _row_index, _col_index);\n\n            expect(_result).toEqual(true);\n        });\n    });\n\n    //------------------------------------------------------------\n    // areApiCoordsValidForInsert\n    //------------------------------------------------------------\n\n    describe(\"areApiCoordsValidForInsert\", () => {\n\n        describe(\"when inserting a node in a new column position\", () => {\n\n            it(\"should return false and log error if column index param is invalid (more than 1 place beyond last non control node)\", () => {\n\n                spyOn(console, 'error');\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 2;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(false);\n                expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n            });\n\n            it(\"should return true if column index is valid (same as last non control node)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n\n            it(\"should return true if column index is valid (1 place beyond last non control node)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 1;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n        });\n\n        describe(\"when inserting a node in a new row position\", () => {\n\n            it(\"should return false and log error if row index param is invalid (more than 1 place beyond last row)\", () => {\n\n                spyOn(console, 'error');\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 2;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(false);\n                expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_ROW_INDEX);\n            });\n\n            it(\"should return true if row index is valid (same as last row)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n\n            it(\"should return true if row index is valid (1 place beyond last row)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 1;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n        });\n    });\n});"],"sourceRoot":"src/app/*.js"}