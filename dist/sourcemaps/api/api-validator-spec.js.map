{"version":3,"sources":["api/api-validator-spec.js"],"names":["Validator","describe","it","spyOn","console","_node1","label","_node2","_node_row1_columns","_node_row1","columns","_nodes","_row_index","_connections","_result","areApiConnectionsValid","expect","toEqual","error","toHaveBeenCalledWith","MESSAGE_ERROR_INVALID_NODES_DATA","_node3","_node4","_node_row2_columns","_node_row2","MESSAGE_ERROR_INVALID_ROW_INDEX","MESSAGE_ERROR_INVALID_CONNECTIONS","_col_index","areApiCoordsValid","MESSAGE_ERROR_INVALID_COLUMN_INDEX","areApiCoordsValidForInsert"],"mappings":"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","file":"api/api-validator-spec.js","sourcesContent":["// local: models\nimport AngularSvgNodeRow from '../row/row-model';\nimport AngularSvgNode from '../node/node-model';\n\n// SUT\nimport * as Validator from './api-validator';\n\ndescribe(\"API Validator\", () => {\n\n    //------------------------------------------------------------\n    // areApiConnectionsValid\n    //------------------------------------------------------------\n\n    describe(\"areApiConnectionsValid\", () => {\n\n        it(\"should return false and log error if nodes data only has 1 row\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 0;\n            let _connections = [];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_NODES_DATA);\n        });\n\n        it(\"should return false and log error if row index is last row\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 1;\n            let _connections = [];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_ROW_INDEX);\n        });\n\n        it(\"should return true if all params are valid and no connections are provided\", () => {\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 0;\n            let _connections = [];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(true);\n        });\n\n        it(\"should return false and log an error if a connection is invalid (greater than last non control node)\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 0;\n            let _connections = [\n                0, // valid\n                1 // invalid\n            ];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_CONNECTIONS);\n        });\n\n        it(\"should return true if connections are all valid (less than or equal to last non control node)\", () => {\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node3 = new AngularSvgNode({\n                label: \"BBB\"\n            });\n            let _node4 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _node_row2_columns = [ _node3, _node4 ];\n            let _node_row2 = new AngularSvgNodeRow({\n                columns: _node_row2_columns\n            });\n            let _nodes = [ _node_row1, _node_row2 ];\n            let _row_index = 0;\n            let _connections = [\n                0 // valid\n            ];\n\n            let _result = Validator.areApiConnectionsValid(_nodes, _row_index, _connections);\n\n            expect(_result).toEqual(true);\n        });\n    });\n\n    //------------------------------------------------------------\n    // areApiCoordsValid\n    //------------------------------------------------------------\n\n    describe(\"areApiCoordsValid\", () => {\n\n        it(\"should return false and log error if row index param is invalid\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 1;\n            let _col_index = 0;\n\n            let _result = Validator.areApiCoordsValid(_nodes, _row_index, _col_index);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_ROW_INDEX);\n        });\n\n        it(\"should return false and log error if column index param is invalid\", () => {\n\n            spyOn(console, 'error');\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 0;\n            let _col_index = 1;\n\n            let _result = Validator.areApiCoordsValid(_nodes, _row_index, _col_index);\n\n            expect(_result).toEqual(false);\n            expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n        });\n\n        it(\"should return true if row & column index params are valid\", () => {\n\n            let _node1 = new AngularSvgNode({\n                label: \"AAA\"\n            });\n            let _node2 = new AngularSvgNode({\n                label: \"CONTROL NODE\"\n            });\n            let _node_row1_columns = [ _node1, _node2 ];\n            let _node_row1 = new AngularSvgNodeRow({\n                columns: _node_row1_columns\n            });\n            let _nodes = [ _node_row1 ];\n            let _row_index = 0;\n            let _col_index = 0;\n\n            let _result = Validator.areApiCoordsValid(_nodes, _row_index, _col_index);\n\n            expect(_result).toEqual(true);\n        });\n    });\n\n    //------------------------------------------------------------\n    // areApiCoordsValidForInsert\n    //------------------------------------------------------------\n\n    describe(\"areApiCoordsValidForInsert\", () => {\n\n        describe(\"when inserting a node in a new column position\", () => {\n\n            it(\"should return false and log error if column index param is invalid (more than 1 place beyond last non control node)\", () => {\n\n                spyOn(console, 'error');\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 2;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(false);\n                expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n            });\n\n            it(\"should return true if column index is valid (same as last non control node)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n\n            it(\"should return true if column index is valid (1 place beyond last non control node)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 1;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n        });\n\n        describe(\"when inserting a node in a new row position\", () => {\n\n            it(\"should return false and log error if row index param is invalid (more than 1 place beyond last row)\", () => {\n\n                spyOn(console, 'error');\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 2;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(false);\n                expect(console.error).toHaveBeenCalledWith(Validator.MESSAGE_ERROR_INVALID_ROW_INDEX);\n            });\n\n            it(\"should return true if row index is valid (same as last row)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 0;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n\n            it(\"should return true if row index is valid (1 place beyond last row)\", () => {\n\n                let _node1 = new AngularSvgNode({\n                    label: \"AAA\"\n                });\n                let _node2 = new AngularSvgNode({\n                    label: \"CONTROL NODE\"\n                });\n                let _node_row1_columns = [ _node1, _node2 ];\n                let _node_row1 = new AngularSvgNodeRow({\n                    columns: _node_row1_columns\n                });\n                let _nodes = [ _node_row1 ];\n                let _row_index = 1;\n                let _col_index = 0;\n\n                let _result = Validator.areApiCoordsValidForInsert(_nodes, _row_index, _col_index);\n\n                expect(_result).toEqual(true);\n            });\n        });\n    });\n});"],"sourceRoot":"src/app/*.js"}