{"version":3,"sources":["api/api-validator.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAQgB,yBAAA;AAPhB,QA+CgB,oBAAA;AA9ChB,QAsEgB,6BAAA;AA7ET,IAAM,mCAAA,QAAA,mCAAuC;AAC7C,IAAM,oCAAA,QAAA,oCAAuC;AAC7C,IAAM,kCAAA,QAAA,kCAAuC;AAC7C,IAAM,qCAAA,QAAA,qCAAuC;;AAU7C,SAAS,uBAAuB,OAAO,WAAW,aAAa;IAGlE,IAAI,MAAM,WAAW,GAAG;QACpB,QAAQ,MAAM;QACd,OAAO;;;IAIX,IAAI,cAAc,MAAM,SAAS,GAAG;QAChC,QAAQ,MAAM;QACd,OAAO;;;IAKX,IAAI,EAAE,QAAQ,cAAc;QACxB,OAAO;;;IAGX,OAAO,EAAE,OAAO,aAAa,UAAC,QAAQ,sBAAyB;QAG3D,IAAI,wBAAwB,MAAM,YAAY,GAAG,QAAQ,SAAS,GAAG;YACjE,QAAQ,MAAM;YACd,SAAS;;;QAGb,OAAO;OACR;;;AAWA,SAAS,kBAAkB,OAAO,WAAW,WAAW;;IAE3D,IAAI,aAAa,MAAM,QAAQ;QAC3B,QAAQ,MAAM;QACd,OAAO;;;IAIX,IAAI,aAAa,MAAM,WAAW,QAAQ,SAAS,GAAG;QAClD,QAAQ,MAAM;QACd,OAAO;;;IAGX,OAAO;;;AAWJ,SAAS,2BAA2B,OAAO,WAAW,WAAW;;IAEpE,IAAI,cAAc,KAAK,YAAY,MAAM,QAAQ;QAC7C,QAAQ,MAAM;QACd,OAAO;;;IAIX,IAAI,cAAc,KAAK,YAAY,MAAM,WAAW,QAAQ,SAAS,GAAG;QACpE,QAAQ,MAAM;QACd,OAAO;;;IAGX,OAAO;CACV","file":"api/api-validator.js","sourcesContent":["export const MESSAGE_ERROR_INVALID_NODES_DATA     = \"AngularSvgNodes Error: invalid nodes data provided\";\nexport const MESSAGE_ERROR_INVALID_CONNECTIONS    = \"AngularSvgNodes Error: invalid connections provided\";\nexport const MESSAGE_ERROR_INVALID_ROW_INDEX      = \"AngularSvgNodes Error: invalid row index provided\";\nexport const MESSAGE_ERROR_INVALID_COLUMN_INDEX   = \"AngularSvgNodes Error: invalid column index provided\";\n\n/**\n * areApiConnectionsValid\n *\n * @param nodes\n * @param row_index\n * @param connections\n * @returns {boolean}\n */\nexport function areApiConnectionsValid(nodes, row_index, connections) {\n\n    // nodes has only 1 row (cannot have connections)\n    if (nodes.length === 1) {\n        console.error(MESSAGE_ERROR_INVALID_NODES_DATA);\n        return false;\n    }\n\n    // row index is last row (cannot have connections)\n    if (row_index === nodes.length - 1) {\n        console.error(MESSAGE_ERROR_INVALID_ROW_INDEX);\n        return false;\n    }\n\n    // if no connections then nothing to do so return success\n    // ... but only at this point because this is the first point at which all params are valid\n    if (_.isEmpty(connections)) {\n        return true;\n    }\n\n    return _.reduce(connections, (result, connection_col_index) => {\n\n        // controls are nodes too, so check against length - 1\n        if (connection_col_index >= nodes[row_index + 1].columns.length - 1) {\n            console.error(MESSAGE_ERROR_INVALID_CONNECTIONS);\n            result = false;\n        }\n\n        return result;\n    }, true);\n}\n\n/**\n * areApiCoordsValid\n *\n * @param nodes\n * @param row_index\n * @param col_index\n * @returns {boolean}\n */\nexport function areApiCoordsValid(nodes, row_index, col_index) {\n\n    if (row_index >= nodes.length) {\n        console.error(MESSAGE_ERROR_INVALID_ROW_INDEX);\n        return false;\n    }\n\n    // controls are nodes too, so check against length - 1\n    if (col_index >= nodes[row_index].columns.length - 1) {\n        console.error(MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * areApiCoordsValidForInsert\n *\n * @param nodes\n * @param row_index\n * @param col_index\n * @returns {boolean}\n */\nexport function areApiCoordsValidForInsert(nodes, row_index, col_index) {\n\n    if (row_index !== 0 && row_index > nodes.length) {\n        console.error(MESSAGE_ERROR_INVALID_ROW_INDEX);\n        return false;\n    }\n\n    // controls are nodes too, so check against length - 1\n    if (col_index !== 0 && col_index > nodes[row_index].columns.length - 1) {\n        console.error(MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n        return false;\n    }\n\n    return true;\n}"],"sourceRoot":"src/app/*.js"}