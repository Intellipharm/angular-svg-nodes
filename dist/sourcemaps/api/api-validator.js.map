{"version":3,"sources":["api/api-validator.js"],"names":["areApiConnectionsValid","areApiCoordsValid","areApiCoordsValidForInsert","MESSAGE_ERROR_INVALID_NODES_DATA","MESSAGE_ERROR_INVALID_CONNECTIONS","MESSAGE_ERROR_INVALID_ROW_INDEX","MESSAGE_ERROR_INVALID_COLUMN_INDEX","nodes","row_index","connections","length","console","error","_","isEmpty","reduce","result","connection_col_index","columns","col_index"],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAQgBA,yBAAAA;AAPhB,QA+CgBC,oBAAAA;AA9ChB,QAsEgBC,6BAAAA;AA7ET,IAAMC,mCAAAA,QAAAA,mCAAuC;AAC7C,IAAMC,oCAAAA,QAAAA,oCAAuC;AAC7C,IAAMC,kCAAAA,QAAAA,kCAAuC;AAC7C,IAAMC,qCAAAA,QAAAA,qCAAuC;;AAU7C,SAASN,uBAAuBO,OAAOC,WAAWC,aAAa;IAGlE,IAAIF,MAAMG,WAAW,GAAG;QACpBC,QAAQC,MAAMT;QACd,OAAO;;;IAIX,IAAIK,cAAcD,MAAMG,SAAS,GAAG;QAChCC,QAAQC,MAAMP;QACd,OAAO;;;IAKX,IAAIQ,EAAEC,QAAQL,cAAc;QACxB,OAAO;;;IAGX,OAAOI,EAAEE,OAAON,aAAa,UAACO,QAAQC,sBAAyB;QAG3D,IAAIA,wBAAwBV,MAAMC,YAAY,GAAGU,QAAQR,SAAS,GAAG;YACjEC,QAAQC,MAAMR;YACdY,SAAS;;;QAGb,OAAOA;OACR;;;AAWA,SAASf,kBAAkBM,OAAOC,WAAWW,WAAW;;IAE3D,IAAIX,aAAaD,MAAMG,QAAQ;QAC3BC,QAAQC,MAAMP;QACd,OAAO;;;IAIX,IAAIc,aAAaZ,MAAMC,WAAWU,QAAQR,SAAS,GAAG;QAClDC,QAAQC,MAAMN;QACd,OAAO;;;IAGX,OAAO;;;AAWJ,SAASJ,2BAA2BK,OAAOC,WAAWW,WAAW;;IAEpE,IAAIX,cAAc,KAAKA,YAAYD,MAAMG,QAAQ;QAC7CC,QAAQC,MAAMP;QACd,OAAO;;;IAIX,IAAIc,cAAc,KAAKA,YAAYZ,MAAMC,WAAWU,QAAQR,SAAS,GAAG;QACpEC,QAAQC,MAAMN;QACd,OAAO;;;IAGX,OAAO;CACV","file":"api/api-validator.js","sourcesContent":["export const MESSAGE_ERROR_INVALID_NODES_DATA     = \"AngularSvgNodes Error: invalid nodes data provided\";\nexport const MESSAGE_ERROR_INVALID_CONNECTIONS    = \"AngularSvgNodes Error: invalid connections provided\";\nexport const MESSAGE_ERROR_INVALID_ROW_INDEX      = \"AngularSvgNodes Error: invalid row index provided\";\nexport const MESSAGE_ERROR_INVALID_COLUMN_INDEX   = \"AngularSvgNodes Error: invalid column index provided\";\n\n/**\n * areApiConnectionsValid\n *\n * @param nodes\n * @param row_index\n * @param connections\n * @returns {boolean}\n */\nexport function areApiConnectionsValid(nodes, row_index, connections) {\n\n    // nodes has only 1 row (cannot have connections)\n    if (nodes.length === 1) {\n        console.error(MESSAGE_ERROR_INVALID_NODES_DATA);\n        return false;\n    }\n\n    // row index is last row (cannot have connections)\n    if (row_index === nodes.length - 1) {\n        console.error(MESSAGE_ERROR_INVALID_ROW_INDEX);\n        return false;\n    }\n\n    // if no connections then nothing to do so return success\n    // ... but only at this point because this is the first point at which all params are valid\n    if (_.isEmpty(connections)) {\n        return true;\n    }\n\n    return _.reduce(connections, (result, connection_col_index) => {\n\n        // controls are nodes too, so check against length - 1\n        if (connection_col_index >= nodes[row_index + 1].columns.length - 1) {\n            console.error(MESSAGE_ERROR_INVALID_CONNECTIONS);\n            result = false;\n        }\n\n        return result;\n    }, true);\n}\n\n/**\n * areApiCoordsValid\n *\n * @param nodes\n * @param row_index\n * @param col_index\n * @returns {boolean}\n */\nexport function areApiCoordsValid(nodes, row_index, col_index) {\n\n    if (row_index >= nodes.length) {\n        console.error(MESSAGE_ERROR_INVALID_ROW_INDEX);\n        return false;\n    }\n\n    // controls are nodes too, so check against length - 1\n    if (col_index >= nodes[row_index].columns.length - 1) {\n        console.error(MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * areApiCoordsValidForInsert\n *\n * @param nodes\n * @param row_index\n * @param col_index\n * @returns {boolean}\n */\nexport function areApiCoordsValidForInsert(nodes, row_index, col_index) {\n\n    if (row_index !== 0 && row_index > nodes.length) {\n        console.error(MESSAGE_ERROR_INVALID_ROW_INDEX);\n        return false;\n    }\n\n    // controls are nodes too, so check against length - 1\n    if (col_index !== 0 && col_index > nodes[row_index].columns.length - 1) {\n        console.error(MESSAGE_ERROR_INVALID_COLUMN_INDEX);\n        return false;\n    }\n\n    return true;\n}"],"sourceRoot":"src/app/*.js"}