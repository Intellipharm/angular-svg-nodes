{"version":3,"sources":["angular-svg-nodes-utils.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAcgB,gBAAA;AAbhB,QAoDgB,uBAAA;;AA1DhB,IAAA,UAAA,QAAA;;AAUA,IAAI,WAAW,uBAAuB;;AAPtC,IAAA,2BAAA,QAAA;;AAWA,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AAEvF,SAAS,mBAAmB,KAAK,EAAE,IAAI,MAAM,QAAQ,MAAM,EAAE,KAAK,IAAI,IAAI,GAAG,OAAO,MAAM,IAAI,SAAS,IAAI,IAAI,QAAQ,KAAK,EAAE,KAAK,KAAK,IAAI,MAAM,OAAO,aAAa,EAAE,OAAO,MAAM,KAAK;;AAGnL,SAAS,cAAc,WAAW,WAAW,UAAU,QAAQ;;IAElE,IAAI,eAAe,OAAO,aAAa,OAAO;IAC9C,IAAI,gBAAgB,OAAO,cAAc,OAAO;;IAEhD,IAAI,IAAI,CAAE,YAAY,KAAM,eAAe;IAC3C,IAAI,IAAI,CAAE,YAAY,KAAM,gBAAgB;;IAE5C,QAAQ;QACJ;QACA,KAAA,yBAAA;YACI;;QAEJ,KAAA,yBAAA;YACI,KAAK,OAAO,aAAa;YACzB;;QAEJ,KAAA,yBAAA;YACI,KAAK,OAAO,aAAa;YACzB,KAAK,OAAO,cAAc;YAC1B;;QAEJ,KAAA,yBAAA;YACI,KAAK,OAAO,aAAa;YACzB,KAAK,OAAO;YACZ;;;IAGR,OAAO,CAAC,GAAG;;;AAWR,SAAS,qBAAqB,MAAM,KAAK,KAAK;;IAEjD,OAAO,SAAA,QAAE,OAAO,MAAM,UAAC,QAAQ,MAAS;QACpC,IAAI,SAAA,QAAE,IAAI,MAAM,SAAS,SAAA,QAAE,IAAI,MAAM,QAAQ,SAAA,QAAE,SAAS,KAAK,KAAK,KAAK;YACnE,SAAA,GAAA,OAAA,mBACO,SACA,CAAE,KAAM;;QAGnB,OAAO;OACR;CACN","file":"angular-svg-nodes-utils.js","sourcesContent":["import _ from \"lodash\";\n\n// local: constants\nimport {\n    NODE_TOP_LEFT,\n    NODE_TOP,\n    NODE_CENTER,\n    NODE_BOTTOM\n} from \"./angular-svg-nodes-settings\";\n\n/**\n * returns the x,y location coordinates of the node identified by row & column indices\n *\n * @param row_index\n * @param col_index\n * @param position\n * @param config\n * @returns {*}\n */\nexport function getNodeCoords(row_index, col_index, position, config) {\n\n    let _total_width = config.node_width + config.col_spacing;\n    let _total_height = config.node_height + config.row_spacing;\n\n    let x = ( col_index + 1 ) * _total_width - _total_width;\n    let y = ( row_index + 1 ) * _total_height - _total_height;\n\n    switch (position) {\n        default:\n        case NODE_TOP_LEFT:\n            break;\n\n        case NODE_TOP:\n            x += config.node_width / 2;\n            break;\n\n        case NODE_CENTER:\n            x += config.node_width / 2;\n            y += config.node_height / 2;\n            break;\n\n        case NODE_BOTTOM:\n            x += config.node_width / 2;\n            y += config.node_height;\n            break;\n    }\n\n    return [x, y];\n}\n\n/**\n * returns an array of values for given key, for each item whose id is in given ids array\n *\n * @param data\n * @param ids\n * @param key\n * @returns {Array}\n */\nexport function getValuesForKeyByIds(data, ids, key) {\n\n    return _.reduce(data, (result, item) => {\n        if (_.has(item, 'id') && _.has(item, key) && _.includes(ids, item.id)) {\n            result = [\n                ...result,\n                ...[ item[ key ] ]\n            ];\n        }\n        return result;\n    }, []);\n}"],"sourceRoot":"src/app/*.js"}