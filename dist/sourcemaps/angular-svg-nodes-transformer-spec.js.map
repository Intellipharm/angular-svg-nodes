{"version":3,"sources":["angular-svg-nodes-transformer-spec.js"],"names":["Transformer","describe","_data","id","label","col_index","row_index","connections","it","_result","transformIn","expect","length","toBe","columns","_labels","_","reduce","result","row","map","col","_expected_labels","toEqual","_custom_data","name","ui_column_index","ui_row_index","_config","row_index_field","col_index_field","label_field","_joins","_expected_joins","my_connections","connection_field","_expected_result","_row","_target_ids","_source_col_index","transformRow"],"mappings":"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","file":"angular-svg-nodes-transformer-spec.js","sourcesContent":["import deepFreeze from 'deep-freeze';\n\nimport AngularSvgNodeRow from './row/row-model';\nimport AngularSvgNode from './node/node-model';\nimport AngularSvgNodeTransformerConfig from './transformer-config/transformer-config-model';\n\nimport * as Transformer from './angular-svg-nodes-transformer';\n\ndescribe(\"AngularSvgNodes Transformer\", () => {\n\n    //------------------------------------------------------------\n    // transformIn\n    //------------------------------------------------------------\n\n    describe(\"transformIn\", () => {\n\n        let _data = [\n            {\n                id: 1,\n                label: \"A2\",\n                col_index: 1,\n                row_index: 0,\n                connections: []\n            },\n            {\n                id: 2,\n                label: \"A1\",\n                col_index: 0,\n                row_index: 0,\n                connections: []\n            },\n            {\n                id: 4,\n                label: \"A3\",\n                col_index: 2,\n                row_index: 0,\n                connections: []\n            },\n            {\n                id: 5,\n                label: \"B1\",\n                col_index: 0,\n                row_index: 1,\n                connections: [ 2, 4 ]\n            },\n            {\n                id: 6,\n                label: \"B2\",\n                col_index: 1,\n                row_index: 1,\n                connections: []\n            },\n            {\n                id: 7,\n                label: \"B3\",\n                col_index: 2,\n                row_index: 1,\n                connections: [ 4 ]\n            },\n            {\n                id: 8,\n                label: \"C1\",\n                col_index: 0,\n                row_index: 2,\n                connections: [ 6 ]\n            }\n        ];\n\n        deepFreeze(_data);\n\n        it(\"should return correctly formatted result\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            // should return 3 rows\n            expect(_result.length).toBe(3);\n\n            // ... rows should be AngularSvgNodeRow instances\n            expect(_result[0] instanceof AngularSvgNodeRow).toBe(true);\n            expect(_result[1] instanceof AngularSvgNodeRow).toBe(true);\n            expect(_result[2] instanceof AngularSvgNodeRow).toBe(true);\n\n            // ... 1st row should have 3 columns\n            expect(_result[0].columns.length).toBe(3);\n\n            // ... 2nd row should have 3 columns\n            expect(_result[1].columns.length).toBe(3);\n\n            // ... 3rd row should have 1 column\n            expect(_result[2].columns.length).toBe(1);\n\n            // ... columns property should contain an array of AngularSvgNode instances\n            expect(_result[0].columns[0] instanceof AngularSvgNode).toBe(true);\n            expect(_result[0].columns[1] instanceof AngularSvgNode).toBe(true);\n            expect(_result[0].columns[2] instanceof AngularSvgNode).toBe(true);\n            expect(_result[1].columns[0] instanceof AngularSvgNode).toBe(true);\n            expect(_result[1].columns[1] instanceof AngularSvgNode).toBe(true);\n            expect(_result[1].columns[2] instanceof AngularSvgNode).toBe(true);\n            expect(_result[0].columns[0] instanceof AngularSvgNode).toBe(true);\n        });\n\n        it(\"should sort columns correctly and set labels correctly with default data/config\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            let _labels = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.label;\n                }) ];\n            }, []);\n\n            let _expected_labels = ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1'];\n\n            expect(_labels).toEqual(_expected_labels);\n        });\n\n        it(\"should sort columns correctly and set labels correctly with custom data/config\", () => {\n\n            let _custom_data = [\n                {\n                    id: 1,\n                    name: \"A2\",\n                    ui_column_index: 1,\n                    ui_row_index: 0,\n                    connections: []\n                },\n                {\n                    id: 2,\n                    name: \"A1\",\n                    ui_column_index: 0,\n                    ui_row_index: 0,\n                    connections: []\n                },\n                {\n                    id: 4,\n                    name: \"A3\",\n                    ui_column_index: 2,\n                    ui_row_index: 0,\n                    connections: []\n                },\n                {\n                    id: 5,\n                    name: \"B1\",\n                    ui_column_index: 0,\n                    ui_row_index: 1,\n                    connections: [ 2, 4 ]\n                },\n                {\n                    id: 6,\n                    name: \"B2\",\n                    ui_column_index: 1,\n                    ui_row_index: 1,\n                    connections: []\n                },\n                {\n                    id: 7,\n                    name: \"B3\",\n                    ui_column_index: 2,\n                    ui_row_index: 1,\n                    connections: [ 4 ]\n                },\n                {\n                    id: 8,\n                    name: \"C1\",\n                    ui_column_index: 0,\n                    ui_row_index: 2,\n                    connections: [ 6 ]\n                }\n            ];\n\n            let _config = new AngularSvgNodeTransformerConfig({\n                row_index_field: 'ui_row_index',\n                col_index_field: 'ui_column_index',\n                label_field: 'name'\n            });\n\n            deepFreeze(_custom_data);\n            deepFreeze(_config);\n\n            let _result = Transformer.transformIn(_custom_data, _config);\n\n            let _labels = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.label;\n                }) ];\n            }, []);\n\n            let _expected_labels = ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1'];\n\n            expect(_labels).toEqual(_expected_labels);\n        });\n\n        it(\"should sort columns correctly and set connections correctly with default data/config\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            let _joins = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.connections;\n                }) ];\n            }, []);\n\n            let _expected_joins =   [ [0], [], [0, 2], [], [0], [], [] ];\n\n            expect(_joins).toEqual(_expected_joins);\n        });\n\n        it(\"should sort columns correctly and set connections correctly with custom data/config\", () => {\n\n            let _custom_data = [\n                {\n                    id: 1,\n                    name: \"A2\",\n                    ui_column_index: 1,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 2,\n                    name: \"A1\",\n                    ui_column_index: 0,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 4,\n                    name: \"A3\",\n                    ui_column_index: 2,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 5,\n                    name: \"B1\",\n                    ui_column_index: 0,\n                    ui_row_index: 1,\n                    my_connections: [ 2, 4 ]\n                },\n                {\n                    id: 6,\n                    name: \"B2\",\n                    ui_column_index: 1,\n                    ui_row_index: 1,\n                    my_connections: []\n                },\n                {\n                    id: 7,\n                    name: \"B3\",\n                    ui_column_index: 2,\n                    ui_row_index: 1,\n                    my_connections: [ 4 ]\n                },\n                {\n                    id: 8,\n                    name: \"C1\",\n                    ui_column_index: 0,\n                    ui_row_index: 2,\n                    my_connections: [ 6 ]\n                }\n            ];\n\n            let _config = new AngularSvgNodeTransformerConfig({\n                row_index_field: 'ui_row_index',\n                col_index_field: 'ui_column_index',\n                label_field: 'name',\n                connection_field: 'my_connections'\n            });\n\n            deepFreeze(_custom_data);\n            deepFreeze(_config);\n\n            let _result = Transformer.transformIn(_custom_data, _config);\n\n            let _joins = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.connections;\n                }) ];\n            }, []);\n\n            let _expected_joins =  [ [0], [], [0, 2], [], [0], [], [] ];\n\n            expect(_joins).toEqual(_expected_joins);\n        });\n\n        it(\"should convert compatible database data to AngularSvgNodes initial state data, using default data/config\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            let _expected_result = [\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ connections: [ 0 ], label: \"A1\" }),\n                        new AngularSvgNode({ connections: [], label: \"A2\" }),\n                        new AngularSvgNode({ connections: [ 0, 2 ], label: \"A3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ connections: [], label: \"B1\" }),\n                        new AngularSvgNode({ connections: [ 0 ], label: \"B2\" }),\n                        new AngularSvgNode({ connections: [], label: \"B3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ connections: [], label: \"C1\" })\n                    ]\n                })\n            ];\n\n            expect(_result).toEqual(_expected_result);\n        });\n\n        it(\"should convert compatible database data to AngularSvgNodes initial state data, using custom data/config\", () => {\n\n            let _custom_data = [\n                {\n                    id: 1,\n                    name: \"A2\",\n                    ui_column_index: 1,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 2,\n                    name: \"A1\",\n                    ui_column_index: 0,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 4,\n                    name: \"A3\",\n                    ui_column_index: 2,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 5,\n                    name: \"B1\",\n                    ui_column_index: 0,\n                    ui_row_index: 1,\n                    my_connections: [ 2, 4 ]\n                },\n                {\n                    id: 6,\n                    name: \"B2\",\n                    ui_column_index: 1,\n                    ui_row_index: 1,\n                    my_connections: []\n                },\n                {\n                    id: 7,\n                    name: \"B3\",\n                    ui_column_index: 2,\n                    ui_row_index: 1,\n                    my_connections: [ 4 ]\n                },\n                {\n                    id: 8,\n                    name: \"C1\",\n                    ui_column_index: 0,\n                    ui_row_index: 2,\n                    my_connections: [ 6 ]\n                }\n            ];\n            let _config = new AngularSvgNodeTransformerConfig({\n                row_index_field: 'ui_row_index',\n                col_index_field: 'ui_column_index',\n                label_field: 'name',\n                connection_field: 'my_connections'\n            });\n\n            deepFreeze(_custom_data);\n            deepFreeze(_config);\n\n            let _result = Transformer.transformIn(_custom_data, _config);\n\n            let _expected_result = [\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ connections: [ 0 ], label: \"A1\" }),\n                        new AngularSvgNode({ connections: [], label: \"A2\" }),\n                        new AngularSvgNode({ connections: [ 0, 2 ], label: \"A3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ connections: [], label: \"B1\" }),\n                        new AngularSvgNode({ connections: [ 0 ], label: \"B2\" }),\n                        new AngularSvgNode({ connections: [], label: \"B3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ connections: [], label: \"C1\" })\n                    ]\n                })\n            ];\n\n            expect(_result).toEqual(_expected_result);\n        });\n    });\n\n    //------------------------------------------------------------\n    // transformRow\n    //------------------------------------------------------------\n\n    describe(\"transformRow\", () => {\n\n        it(\"should return new AngularSvgNodeRow with updated column connections by appending source_col_index to columns that match target_ids\", () => {\n\n            let _custom_data = [\n                {\n                    id: 11,\n                    label: \"AAA\",\n                    col_index: 1\n                },\n                {\n                    id: 22,\n                    label: \"BBB\",\n                    col_index: 0\n                },\n                {\n                    id: 33,\n                    label: \"CCC\",\n                    col_index: 2\n                }\n            ];\n            let _row = new AngularSvgNodeRow({\n                columns: [\n                    new AngularSvgNode({ label: \"BBB\", connections: [] }), // 22\n                    new AngularSvgNode({ label: \"AAA\", connections: [ 444 ] }), // 11\n                    new AngularSvgNode({ label: \"CCC\", connections: [] }) // 33\n                ]\n            });\n            let _target_ids = [ 11, 33 ];\n            let _source_col_index = 666;\n\n            deepFreeze(_custom_data);\n            deepFreeze(_row);\n            deepFreeze(_target_ids);\n\n            let _result = Transformer.transformRow(_custom_data, _row, _target_ids, _source_col_index);\n\n            // result should be an AngularSvgNodeRow instance\n            expect(_result instanceof AngularSvgNodeRow).toBe(true);\n\n            // ... should contain 3 columns\n            expect(_result.columns.length).toBe(3);\n\n            // ... each column be an AngularSvgNode instance\n            expect(_result.columns[0] instanceof AngularSvgNode).toBe(true);\n            expect(_result.columns[1] instanceof AngularSvgNode).toBe(true);\n            expect(_result.columns[2] instanceof AngularSvgNode).toBe(true);\n\n            // ... should correctly update each node's connections property\n            expect(_result.columns[0].connections).toEqual([]);\n            expect(_result.columns[1].connections).toEqual([ 444, 666 ]);\n            expect(_result.columns[2].connections).toEqual([ 666 ]);\n        });\n\n    });\n\n});\n\n\n\n\n"],"sourceRoot":"src/app/*.js"}