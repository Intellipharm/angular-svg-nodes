{"version":3,"sources":["angular-svg-nodes-transformer-spec.js"],"names":[],"mappings":"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","file":"angular-svg-nodes-transformer-spec.js","sourcesContent":["import deepFreeze from 'deep-freeze';\n\nimport AngularSvgNodeRow from './row/row-model';\nimport AngularSvgNode from './node/node-model';\nimport AngularSvgNodeTransformerConfig from './transformer-config/transformer-config-model';\n\nimport * as Transformer from './angular-svg-nodes-transformer';\n\ndescribe(\"AngularSvgNodes Transformer\", () => {\n\n    //------------------------------------------------------------\n    // transformIn\n    //------------------------------------------------------------\n\n    describe(\"transformIn\", () => {\n\n        let _data = [\n            {\n                id: 1,\n                label: \"A2\",\n                col_index: 1,\n                row_index: 0,\n                connections: []\n            },\n            {\n                id: 2,\n                label: \"A1\",\n                col_index: 0,\n                row_index: 0,\n                connections: []\n            },\n            {\n                id: 4,\n                label: \"A3\",\n                col_index: 2,\n                row_index: 0,\n                connections: []\n            },\n            {\n                id: 5,\n                label: \"B1\",\n                col_index: 0,\n                row_index: 1,\n                connections: [ 2, 4 ]\n            },\n            {\n                id: 6,\n                label: \"B2\",\n                col_index: 1,\n                row_index: 1,\n                connections: []\n            },\n            {\n                id: 7,\n                label: \"B3\",\n                col_index: 2,\n                row_index: 1,\n                connections: [ 4 ]\n            },\n            {\n                id: 8,\n                label: \"C1\",\n                col_index: 0,\n                row_index: 2,\n                connections: [ 6 ]\n            }\n        ];\n\n        deepFreeze(_data);\n\n        it(\"should return correctly formatted result\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            // should return 3 rows\n            expect(_result.length).toBe(3);\n\n            // ... rows should be AngularSvgNodeRow instances\n            expect(_result[0] instanceof AngularSvgNodeRow).toBe(true);\n            expect(_result[1] instanceof AngularSvgNodeRow).toBe(true);\n            expect(_result[2] instanceof AngularSvgNodeRow).toBe(true);\n\n            // ... 1st row should have 3 columns\n            expect(_result[0].columns.length).toBe(3);\n\n            // ... 2nd row should have 3 columns\n            expect(_result[1].columns.length).toBe(3);\n\n            // ... 3rd row should have 1 column\n            expect(_result[2].columns.length).toBe(1);\n\n            // ... columns property should contain an array of AngularSvgNode instances\n            expect(_result[0].columns[0] instanceof AngularSvgNode).toBe(true);\n            expect(_result[0].columns[1] instanceof AngularSvgNode).toBe(true);\n            expect(_result[0].columns[2] instanceof AngularSvgNode).toBe(true);\n            expect(_result[1].columns[0] instanceof AngularSvgNode).toBe(true);\n            expect(_result[1].columns[1] instanceof AngularSvgNode).toBe(true);\n            expect(_result[1].columns[2] instanceof AngularSvgNode).toBe(true);\n            expect(_result[0].columns[0] instanceof AngularSvgNode).toBe(true);\n        });\n\n        it(\"should sort columns correctly and set labels correctly with default data/config\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            let _labels = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.label;\n                }) ];\n            }, []);\n\n            let _expected_labels = ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1'];\n\n            expect(_labels).toEqual(_expected_labels);\n        });\n\n        it(\"should sort columns correctly and set labels correctly with custom data/config\", () => {\n\n            let _custom_data = [\n                {\n                    id: 1,\n                    name: \"A2\",\n                    ui_column_index: 1,\n                    ui_row_index: 0,\n                    connections: []\n                },\n                {\n                    id: 2,\n                    name: \"A1\",\n                    ui_column_index: 0,\n                    ui_row_index: 0,\n                    connections: []\n                },\n                {\n                    id: 4,\n                    name: \"A3\",\n                    ui_column_index: 2,\n                    ui_row_index: 0,\n                    connections: []\n                },\n                {\n                    id: 5,\n                    name: \"B1\",\n                    ui_column_index: 0,\n                    ui_row_index: 1,\n                    connections: [ 2, 4 ]\n                },\n                {\n                    id: 6,\n                    name: \"B2\",\n                    ui_column_index: 1,\n                    ui_row_index: 1,\n                    connections: []\n                },\n                {\n                    id: 7,\n                    name: \"B3\",\n                    ui_column_index: 2,\n                    ui_row_index: 1,\n                    connections: [ 4 ]\n                },\n                {\n                    id: 8,\n                    name: \"C1\",\n                    ui_column_index: 0,\n                    ui_row_index: 2,\n                    connections: [ 6 ]\n                }\n            ];\n\n            let _config = new AngularSvgNodeTransformerConfig({\n                row_index_field: 'ui_row_index',\n                col_index_field: 'ui_column_index',\n                label_field: 'name'\n            });\n\n            deepFreeze(_custom_data);\n            deepFreeze(_config);\n\n            let _result = Transformer.transformIn(_custom_data, _config);\n\n            let _labels = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.label;\n                }) ];\n            }, []);\n\n            let _expected_labels = ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1'];\n\n            expect(_labels).toEqual(_expected_labels);\n        });\n\n        it(\"should sort columns correctly and set joins correctly with default data/config\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            let _joins = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.join;\n                }) ];\n            }, []);\n\n            let _expected_joins =   [ [0], [], [0, 2], [], [0], [], [] ];\n\n            expect(_joins).toEqual(_expected_joins);\n        });\n\n        it(\"should sort columns correctly and set joins correctly with custom data/config\", () => {\n\n            let _custom_data = [\n                {\n                    id: 1,\n                    name: \"A2\",\n                    ui_column_index: 1,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 2,\n                    name: \"A1\",\n                    ui_column_index: 0,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 4,\n                    name: \"A3\",\n                    ui_column_index: 2,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 5,\n                    name: \"B1\",\n                    ui_column_index: 0,\n                    ui_row_index: 1,\n                    my_connections: [ 2, 4 ]\n                },\n                {\n                    id: 6,\n                    name: \"B2\",\n                    ui_column_index: 1,\n                    ui_row_index: 1,\n                    my_connections: []\n                },\n                {\n                    id: 7,\n                    name: \"B3\",\n                    ui_column_index: 2,\n                    ui_row_index: 1,\n                    my_connections: [ 4 ]\n                },\n                {\n                    id: 8,\n                    name: \"C1\",\n                    ui_column_index: 0,\n                    ui_row_index: 2,\n                    my_connections: [ 6 ]\n                }\n            ];\n\n            let _config = new AngularSvgNodeTransformerConfig({\n                row_index_field: 'ui_row_index',\n                col_index_field: 'ui_column_index',\n                label_field: 'name',\n                connection_field: 'my_connections'\n            });\n\n            deepFreeze(_custom_data);\n            deepFreeze(_config);\n\n            let _result = Transformer.transformIn(_custom_data, _config);\n\n            let _joins = _.reduce(_result, (result, row) => {\n                return [ ...result, ..._.map(row.columns, (col) => {\n                    return col.join;\n                }) ];\n            }, []);\n\n            let _expected_joins =  [ [0], [], [0, 2], [], [0], [], [] ];\n\n            expect(_joins).toEqual(_expected_joins);\n        });\n\n        it(\"should convert compatible database data to AngularSvgNodes initial state data, using default data/config\", () => {\n\n            let _result = Transformer.transformIn(_data);\n\n            let _expected_result = [\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ join: [ 0 ], label: \"A1\" }),\n                        new AngularSvgNode({ join: [], label: \"A2\" }),\n                        new AngularSvgNode({ join: [ 0, 2 ], label: \"A3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ join: [], label: \"B1\" }),\n                        new AngularSvgNode({ join: [ 0 ], label: \"B2\" }),\n                        new AngularSvgNode({ join: [], label: \"B3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ join: [], label: \"C1\" })\n                    ]\n                })\n            ];\n\n            expect(_result).toEqual(_expected_result);\n        });\n\n        it(\"should convert compatible database data to AngularSvgNodes initial state data, using custom data/config\", () => {\n\n            let _custom_data = [\n                {\n                    id: 1,\n                    name: \"A2\",\n                    ui_column_index: 1,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 2,\n                    name: \"A1\",\n                    ui_column_index: 0,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 4,\n                    name: \"A3\",\n                    ui_column_index: 2,\n                    ui_row_index: 0,\n                    my_connections: []\n                },\n                {\n                    id: 5,\n                    name: \"B1\",\n                    ui_column_index: 0,\n                    ui_row_index: 1,\n                    my_connections: [ 2, 4 ]\n                },\n                {\n                    id: 6,\n                    name: \"B2\",\n                    ui_column_index: 1,\n                    ui_row_index: 1,\n                    my_connections: []\n                },\n                {\n                    id: 7,\n                    name: \"B3\",\n                    ui_column_index: 2,\n                    ui_row_index: 1,\n                    my_connections: [ 4 ]\n                },\n                {\n                    id: 8,\n                    name: \"C1\",\n                    ui_column_index: 0,\n                    ui_row_index: 2,\n                    my_connections: [ 6 ]\n                }\n            ];\n            let _config = new AngularSvgNodeTransformerConfig({\n                row_index_field: 'ui_row_index',\n                col_index_field: 'ui_column_index',\n                label_field: 'name',\n                connection_field: 'my_connections'\n            });\n\n            deepFreeze(_custom_data);\n            deepFreeze(_config);\n\n            let _result = Transformer.transformIn(_custom_data, _config);\n\n            let _expected_result = [\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ join: [ 0 ], label: \"A1\" }),\n                        new AngularSvgNode({ join: [], label: \"A2\" }),\n                        new AngularSvgNode({ join: [ 0, 2 ], label: \"A3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ join: [], label: \"B1\" }),\n                        new AngularSvgNode({ join: [ 0 ], label: \"B2\" }),\n                        new AngularSvgNode({ join: [], label: \"B3\" })\n                    ]\n                }),\n                new AngularSvgNodeRow({\n                    columns: [\n                        new AngularSvgNode({ join: [], label: \"C1\" })\n                    ]\n                })\n            ];\n\n            expect(_result).toEqual(_expected_result);\n        });\n    });\n\n    //------------------------------------------------------------\n    // transformRow\n    //------------------------------------------------------------\n\n    describe(\"transformRow\", () => {\n\n        it(\"should return new AngularSvgNodeRow with updated column joins by appending source_col_index to columns that match target_ids\", () => {\n\n            let _custom_data = [\n                {\n                    id: 11,\n                    label: \"AAA\",\n                    col_index: 1\n                },\n                {\n                    id: 22,\n                    label: \"BBB\",\n                    col_index: 0\n                },\n                {\n                    id: 33,\n                    label: \"CCC\",\n                    col_index: 2\n                }\n            ];\n            let _row = new AngularSvgNodeRow({\n                columns: [\n                    new AngularSvgNode({ label: \"BBB\", join: [] }), // 22\n                    new AngularSvgNode({ label: \"AAA\", join: [ 444 ] }), // 11\n                    new AngularSvgNode({ label: \"CCC\", join: [] }) // 33\n                ]\n            });\n            let _target_ids = [ 11, 33 ];\n            let _source_col_index = 666;\n\n            deepFreeze(_custom_data);\n            deepFreeze(_row);\n            deepFreeze(_target_ids);\n\n            let _result = Transformer.transformRow(_custom_data, _row, _target_ids, _source_col_index);\n\n            // result should be an AngularSvgNodeRow instance\n            expect(_result instanceof AngularSvgNodeRow).toBe(true);\n\n            // ... should contain 3 columns\n            expect(_result.columns.length).toBe(3);\n\n            // ... each column be an AngularSvgNode instance\n            expect(_result.columns[0] instanceof AngularSvgNode).toBe(true);\n            expect(_result.columns[1] instanceof AngularSvgNode).toBe(true);\n            expect(_result.columns[2] instanceof AngularSvgNode).toBe(true);\n\n            // ... should correctly update each node's join property\n            expect(_result.columns[0].join).toEqual([]);\n            expect(_result.columns[1].join).toEqual([ 444, 666 ]);\n            expect(_result.columns[2].join).toEqual([ 666 ]);\n        });\n\n    });\n\n});\n\n\n\n\n"],"sourceRoot":"src/app/*.js"}