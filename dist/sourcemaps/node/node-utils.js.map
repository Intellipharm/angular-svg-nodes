{"version":3,"sources":["node/node-utils.js"],"names":["getNodeCoords","isNodeIndexMatch","updateNodeLineProperty","updateNodeProperty","updateNodesActivateNode","row_index","col_index","position","config","_total_width","node_width","col_spacing","_total_height","node_height","row_spacing","x","y","node","line","prop","value","Object","assign","nodes","_activate_indices","_","map","row","columns","_node_indices","isEmpty","find","lines","push","to"],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAiBgBA,gBAAAA;AAhBhB,QAuDgBC,mBAAAA;AAtDhB,QAkEgBC,yBAAAA;AAjEhB,QA+EgBC,qBAAAA;AA9EhB,QA8FgBC,0BAAAA;;AAtGhB,IAAA,gBAAA,QAAA;;AAQA,IAAA,aAAA,QAAA;;AAMA,IAAI,cAAc,uBAAuB;;AALzC,IAAA,YAAA,QAAA;;AASA,IAAI,aAAa,uBAAuB;;AARxC,IAAA,aAAA,QAAA;;AAYA,IAAI,cAAc,uBAAuB;;AAEzC,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AAEvF,SAAS,gBAAgB,KAAK,KAAK,OAAO,EAAE,IAAI,OAAO,KAAK,EAAE,OAAO,eAAe,KAAK,KAAK,EAAE,OAAO,OAAO,YAAY,MAAM,cAAc,MAAM,UAAU,gBAAgB,EAAE,IAAI,OAAO,SAAS,OAAO;;AALpM,SAASJ,cAAeK,WAAWC,WAAWC,UAAUC,QAAQ;;IAEnE,IAAIC,eAAeD,OAAOE,aAAaF,OAAOG;IAC9C,IAAIC,gBAAgBJ,OAAOK,cAAcL,OAAOM;;IAEhD,IAAIC,IAAI,CAAET,YAAY,KAAMG,eAAeA;IAC3C,IAAIO,IAAI,CAAEX,YAAY,KAAMO,gBAAgBA;;IAE5C,QAAQL;QACJ;QACA,KAAA,cAAA;YACI;;QAEJ,KAAA,cAAA;YACIQ,KAAKP,OAAOE,aAAa;YACzB;;QAEJ,KAAA,cAAA;YACIK,KAAKP,OAAOE,aAAa;YACzBM,KAAKR,OAAOK,cAAc;YAC1B;;QAEJ,KAAA,cAAA;YACIE,KAAKP,OAAOE,aAAa;YACzBM,KAAKR,OAAOK;YACZ;;;IAGR,OAAO,CAACE,GAAGC;;;AAWR,SAASf,iBAAkBgB,MAAMZ,WAAWC,WAAW;IAC1D,OAAOW,KAAKZ,cAAcA,aAAaY,KAAKX,cAAcA;;;AAWvD,SAASJ,uBAAwBgB,MAAMC,MAAMC,OAAO;IACvD,OAAO,IAAA,YAAA,QAAuBC,OAAOC,OAAO,IAAIJ,MAAlB,gBAAA,IACxBC,MAAQC;;;AAYX,SAASjB,mBAAoBc,MAAME,MAAMC,OAAO;IACnD,OAAO,IAAA,YAAA,QAAmBC,OAAOC,OAAO,IAAIL,MAAlB,gBAAA,IACpBE,MAAQC;;;AAcX,SAAShB,wBAAyBmB,OAAOlB,WAAWC,WAAW;IAAA,IAAA,QAAA;;IAGlE,IAAIkB,oBAAoB,CAAE,EAAEnB,WAAAA,WAAWC,WAAAA;;IAEvC,OAAOmB,EAAEC,IAAIH,OAAO,UAACI,KAAQ;QAGzB,OAAO,IAAA,WAAA,QAAsBN,OAAOC,OAAO,IAAI;YAC3CM,SAASH,EAAEC,IAAIC,IAAIC,SAAS,UAACX,MAAS;;gBAElC,IAAIY,gBAAgB;oBAChBxB,WAAWY,KAAKZ;oBAChBC,WAAWW,KAAKX;;;gBAIpB,IAAI,CAACmB,EAAEK,QAAQL,EAAEM,KAAKP,mBAAmBK,iBAAiB;;oBAItDZ,OAAO,MAAKd,mBAAmBc,MAAM,UAAU;;oBAG/CA,KAAKe,QAAQP,EAAEC,IAAIT,KAAKe,OAAO,UAACd,MAAS;wBAGrCM,kBAAkBS,KAAK,EAAE5B,WAAWa,KAAKgB,GAAG,IAAI5B,WAAWY,KAAKgB,GAAG;;wBAGnE,OAAO,MAAKhC,uBAAuBgB,MAAM,UAAU;;;;gBAI3D,OAAOD;;;;CAItB","file":"node/node-utils.js","sourcesContent":["// local: constants\nimport {\n    NODE_TOP_LEFT,\n    NODE_TOP,\n    NODE_CENTER,\n    NODE_BOTTOM\n} from \"./node-settings\";\n\n// local: models\nimport AngularSvgNode from './node-model';\nimport AngularSvgNodeRow from '../row/row-model';\nimport AngularSvgNodeLine from '../line/line-model';\n\n/**\n * returns the x,y location coordinates of the node identified by row & column indices\n *\n * @param row_index\n * @param col_index\n * @param position\n * @param config\n * @returns {*}\n */\nexport function getNodeCoords (row_index, col_index, position, config) {\n\n    let _total_width = config.node_width + config.col_spacing;\n    let _total_height = config.node_height + config.row_spacing;\n\n    let x = ( col_index + 1 ) * _total_width - _total_width;\n    let y = ( row_index + 1 ) * _total_height - _total_height;\n\n    switch (position) {\n        default:\n        case NODE_TOP_LEFT:\n            break;\n\n        case NODE_TOP:\n            x += config.node_width / 2;\n            break;\n\n        case NODE_CENTER:\n            x += config.node_width / 2;\n            y += config.node_height / 2;\n            break;\n\n        case NODE_BOTTOM:\n            x += config.node_width / 2;\n            y += config.node_height;\n            break;\n    }\n\n    return [x, y];\n}\n\n/**\n * checks whether node matches provided indices\n *\n * @param node\n * @param row_index\n * @param col_index\n * @returns {boolean}\n */\nexport function isNodeIndexMatch (node, row_index, col_index) {\n    return node.row_index === row_index && node.col_index === col_index;\n}\n\n/**\n * updates the line's property and returns new AngularSvgNode instance\n *\n * @param line\n * @param prop\n * @param value\n * @returns {AngularSvgNodeLine}\n */\nexport function updateNodeLineProperty (line, prop, value) {\n    return new AngularSvgNodeLine(Object.assign({}, line, {\n        [ prop ]: value\n    }));\n}\n\n/**\n * updates the node's property and returns new AngularSvgNode instance\n *\n * @param node\n * @param prop\n * @param value\n * @returns {AngularSvgNode}\n */\nexport function updateNodeProperty (node, prop, value) {\n    return new AngularSvgNode(Object.assign({}, node, {\n        [ prop ]: value\n    }));\n}\n\n/**\n * updates provided nodes array by\n * ... activating the targeted node\n * ... activating all the targeted node's lines\n * ... activating all nodes that the targeted node's lines connects to\n *\n * @param nodes\n * @param row_index\n * @param col_index\n */\nexport function updateNodesActivateNode (nodes, row_index, col_index) {\n\n    // this keeps track of which nodes need to be activated\n    let _activate_indices = [ { row_index, col_index } ];\n\n    return _.map(nodes, (row) => {\n\n        // row\n        return new AngularSvgNodeRow(Object.assign({}, {\n            columns: _.map(row.columns, (node) => {\n\n                let _node_indices = {\n                    row_index: node.row_index,\n                    col_index: node.col_index\n                };\n\n                // if node matches indices\n                if (!_.isEmpty(_.find(_activate_indices, _node_indices))) {\n\n                    // activate node\n\n                    node = this.updateNodeProperty(node, 'active', true);\n\n                    // lines\n                    node.lines = _.map(node.lines, (line) => {\n\n                        // update indices array with indices for node that lines connects to, so that it will be activated on the next iteration\n                        _activate_indices.push({ row_index: line.to[1], col_index: line.to[0] });\n\n                        // activate line\n                        return this.updateNodeLineProperty(line, 'active', true);\n                    });\n                }\n\n                return node;\n            })\n        }));\n    });\n}"],"sourceRoot":"src/app/*.js"}