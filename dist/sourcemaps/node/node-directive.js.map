{"version":3,"sources":["node/node-directive.js"],"names":["restrict","scope","coords","col_index","row_index","onSelect","onDeselect","onMouseOver","onMouseOut","link","element","curr_x","ANIM_DURATION","addEventListener","_","parseInt","e","element_bounds","getBoundingClientRect","mouse_y","clientY","element_center","top","height","exit_side","onPositionComplete","$watch","newValue","isUndefined","duration","isNull","TweenLite","to","x","y","ease","Power4","easeOut","onComplete"],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAAQ,UALO;IACXA,UAAU;IACVC,OAAO;QACHC,QAAgB;QAChBC,WAAgB;QAChBC,WAAgB;QAChBC,UAAgB;QAChBC,YAAgB;QAChBC,aAAgB;QAChBC,YAAgB;;IAEpBC,MAAM,SAAA,KAAUR,OAAOS,SAAS;;QAE5B,IAAIC,SAAS;QACb,IAAIC,gBAAgB;;QAYpBF,QAAQ,GAAGG,iBAAiB,aAAa,YAAW;;YAEhD,IAAIV,YAAYW,EAAEC,SAASd,MAAME;YACjC,IAAIC,YAAYU,EAAEC,SAASd,MAAMG;;YAGjCH,MAAMI,SAAS,EAAED,WAAAA,WAAWD,WAAAA;;;QAOhCO,QAAQ,GAAGG,iBAAiB,aAAa,YAAW;;YAEhD,IAAIV,YAAYW,EAAEC,SAASd,MAAME;YACjC,IAAIC,YAAYU,EAAEC,SAASd,MAAMG;;YAGjCH,MAAMM,YAAY,EAAEH,WAAAA,WAAWD,WAAAA;;;QAOnCO,QAAQ,GAAGG,iBAAiB,YAAY,UAASG,GAAG;;YAEhD,IAAIC,iBAAkBP,QAAQ,GAAGQ;YACjC,IAAIC,UAAkBH,EAAEI;YACxB,IAAIC,iBAAkBJ,eAAeK,MAAOL,eAAeM,SAAS;;;YAOpE,IAAIpB,YAAYW,EAAEC,SAASd,MAAME;YACjC,IAAIC,YAAYU,EAAEC,SAASd,MAAMG;YACjC,IAAIoB,YAAYL,UAAUE,iBAAiB,QAAQ;;YAGnDpB,MAAMO,WAAW,EAAEJ,WAAAA,WAAWD,WAAAA,WAAWqB,WAAAA;;;QAO7Cd,QAAQ,GAAGG,iBAAiB,WAAW,YAAW;;YAE9C,IAAIV,YAAYW,EAAEC,SAASd,MAAME;YACjC,IAAIC,YAAYU,EAAEC,SAASd,MAAMG;;YAGjCH,MAAMK,WAAW,EAAEF,WAAAA,WAAWD,WAAAA;;;QAOlC,IAAIsB,qBAAqB,SAArBA,qBAAgC;;QAUpCxB,MAAMyB,OAAO,UAAU,UAASC,UAAU;;YAEtC,IAAI,CAACb,EAAEc,YAAYD,WAAW;gBAC1B,IAAIE,WAAWf,EAAEgB,OAAOnB,UAAU,IAAIC;;gBAEtCmB,UAAUC,GAAGtB,SAASmB,UAAU;oBAC5BI,GAAGN,SAAS,IAAIO,GAAGP,SAAS;oBAC5BQ,MAAMC,OAAOC;oBACbC,YAAYb;;;gBAGhBd,SAASgB,SAAS;;;;EAjChC","file":"node/node-directive.js","sourcesContent":["export default {\n    restrict: 'A',\n    scope: {\n        coords:         \"=angularSvgNodesNodeCoords\",\n        col_index:      \"@angularSvgNodesNodeColIndex\",\n        row_index:      \"@angularSvgNodesNodeRowIndex\",\n        onSelect:       \"&angularSvgNodesNodeOnSelect\",\n        onDeselect:     \"&angularSvgNodesNodeOnDeselect\",\n        onMouseOver:    \"&angularSvgNodesNodeOnMouseOver\",\n        onMouseOut:     \"&angularSvgNodesNodeOnMouseOut\"\n    },\n    link: function (scope, element) {\n\n        let curr_x = null;\n        let ANIM_DURATION = 0.2;\n\n        ////////////////////////////////////////////////\n        //\n        // handlers\n        //\n        ////////////////////////////////////////////////\n\n        //----------------------------------\n        // mouse down\n        //----------------------------------\n\n        element[0].addEventListener(\"mousedown\", function() {\n\n            let col_index = _.parseInt(scope.col_index);\n            let row_index = _.parseInt(scope.row_index);\n\n            // call external handler\n            scope.onSelect({ row_index, col_index });\n        });\n\n        //----------------------------------\n        // mouse down\n        //----------------------------------\n\n        element[0].addEventListener(\"mouseover\", function() {\n\n            let col_index = _.parseInt(scope.col_index);\n            let row_index = _.parseInt(scope.row_index);\n\n            // call external handler\n            scope.onMouseOver({ row_index, col_index });\n        });\n\n        //----------------------------------\n        // mouse out\n        //----------------------------------\n\n        element[0].addEventListener(\"mouseout\", function(e) {\n\n            let element_bounds  = element[0].getBoundingClientRect();\n            let mouse_y         = e.clientY;\n            let element_center  = element_bounds.top + (element_bounds.height / 2);\n            //let element_top     = element_bounds.top + VERTICAL_ALLOWANCE;\n            //let element_bottom  = element_bounds.bottom - VERTICAL_ALLOWANCE;\n\n            //console.log(element_top, element_bottom);\n            //console.log(e.clientY, e.layerY ,e.offsetY ,e.screenY, e.y);\n\n            let col_index = _.parseInt(scope.col_index);\n            let row_index = _.parseInt(scope.row_index);\n            let exit_side = mouse_y < element_center ? 'top' : 'bottom';\n\n            // call external handler\n            scope.onMouseOut({ row_index, col_index, exit_side });\n        });\n\n        //----------------------------------\n        // mouse up\n        //----------------------------------\n\n        element[0].addEventListener(\"mouseup\", function() {\n\n            let col_index = _.parseInt(scope.col_index);\n            let row_index = _.parseInt(scope.row_index);\n\n            // call external handler\n            scope.onDeselect({ row_index, col_index });\n        });\n\n        //----------------------------------\n        // position complete\n        //----------------------------------\n\n        let onPositionComplete = function() {\n\n        };\n\n        ////////////////////////////////////////////////\n        //\n        // watchers\n        //\n        ////////////////////////////////////////////////\n\n        scope.$watch('coords', function(newValue) {\n\n            if (!_.isUndefined(newValue)) {\n                let duration = _.isNull(curr_x) ? 0 : ANIM_DURATION;\n\n                TweenLite.to(element, duration, {\n                    x: newValue[0], y: newValue[1],\n                    ease: Power4.easeOut,\n                    onComplete: onPositionComplete\n                });\n\n                curr_x = newValue[0];\n            }\n        });\n    }\n};"],"sourceRoot":"src/app/*.js"}