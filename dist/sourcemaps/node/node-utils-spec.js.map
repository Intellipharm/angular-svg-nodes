{"version":3,"sources":["node/node-utils-spec.js"],"names":[],"mappings":"AAAA;;AAAA,IAAA,cAAA,QAAA;;AAIA,IAAI,eAAe,uBAAuB;;AAD1C,IAAA,gBAAA,QAAA;;AAQA,IAAA,aAAA,QAAA;;AADA,IACY,QADA,wBAAwB;;AAEpC,SAAS,wBAAwB,KAAK,EAAE,IAAI,OAAO,IAAI,YAAY,EAAE,OAAO,YAAY,EAAE,IAAI,SAAS,IAAI,IAAI,OAAO,MAAM,EAAE,KAAK,IAAI,OAAO,KAAK,EAAE,IAAI,OAAO,UAAU,eAAe,KAAK,KAAK,MAAM,OAAO,OAAO,IAAI,UAAU,OAAO,UAAU,KAAK,OAAO;;AAElQ,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AADvF,SAAS,cAAc,YAAM;;IAMzB,SAAS,iBAAiB,YAAM;;QAE5B,SAAS,wDAAwD,YAAM;;YAEnE,GAAG,wCAAwC,YAAM;;gBAE7C,IAAI,aAAa;gBACjB,IAAI,aAAa;gBACjB,IAAI,YAAA,cAAA;gBACJ,IAAI,UAAU;oBACV,aAAa;oBACb,aAAa;oBACb,YAAY;oBACZ,aAAa;;;gBAGjB,IAAI,UAAU,MAAM,cAAc,YAAY,YAAY,WAAW;;gBAErE,OAAO,SAAS,QAAQ,CAAE,GAAG;;;YAGjC,GAAG,oFAAoF,YAAM;;gBAEzF,IAAI,aAAa;gBACjB,IAAI,aAAa;gBACjB,IAAI,YAAA,cAAA;gBACJ,IAAI,UAAU;oBACV,aAAa;oBACb,aAAa;oBACb,YAAY;oBACZ,aAAa;;;gBAGjB,IAAI,UAAU,MAAM,cAAc,YAAY,YAAY,WAAW;;gBAErE,OAAO,SAAS,QAAQ,CAAE,IAAI;;;YAGlC,GAAG,qFAAqF,YAAM;;gBAE1F,IAAI,aAAa;gBACjB,IAAI,aAAa;gBACjB,IAAI,YAAA,cAAA;gBACJ,IAAI,UAAU;oBACV,aAAa;oBACb,aAAa;oBACb,YAAY;oBACZ,aAAa;;;gBAGjB,IAAI,UAAU,MAAM,cAAc,YAAY,YAAY,WAAW;;gBAErE,OAAO,SAAS,QAAQ,CAAE,IAAI;;;;GA1D9C","file":"node/node-utils-spec.js","sourcesContent":["import deepFreeze from 'deep-freeze';\n\n// local: constants\nimport {\n    NODE_TOP_LEFT,\n    NODE_TOP,\n    NODE_CENTER,\n    NODE_BOTTOM\n} from \"./node-settings\";\n\n// SUT\nimport * as Utils from './node-utils';\n\ndescribe(\"Node Utils\", () => {\n\n    //------------------------------------------------------------\n    // getNodeCoords\n    //------------------------------------------------------------\n\n    describe(\"getNodeCoords\", () => {\n\n        describe(\"should return correct x,y coordinates for given node\", () => {\n\n            it(\"should return 0,0 for first node 0,0\", () => {\n\n                let _col_index = 0;\n                let _row_index = 0;\n                let _position = NODE_TOP_LEFT; // NODE_TOP_LEFT, NODE_TOP, NODE_CENTER, NODE_BOTTOM\n                let _config = {\n                    col_spacing: 0,\n                    row_spacing: 0,\n                    node_width: 10,\n                    node_height: 10\n                };\n\n                let _result = Utils.getNodeCoords(_row_index, _col_index, _position, _config);\n\n                expect(_result).toEqual([ 0, 0 ]);\n            });\n\n            it(\"should take node width & height into account and return 15,10 for first node 1,1\", () => {\n\n                let _col_index = 1;\n                let _row_index = 1;\n                let _position = NODE_TOP_LEFT; // NODE_TOP_LEFT, NODE_TOP, NODE_CENTER, NODE_BOTTOM\n                let _config = {\n                    col_spacing: 0,\n                    row_spacing: 0,\n                    node_width: 15,\n                    node_height: 10\n                };\n\n                let _result = Utils.getNodeCoords(_row_index, _col_index, _position, _config);\n\n                expect(_result).toEqual([ 15, 10 ]);\n            });\n\n            it(\"should take row & column spacing into account and return 17,13 for first node 1,1\", () => {\n\n                let _col_index = 1;\n                let _row_index = 1;\n                let _position = NODE_TOP_LEFT; // NODE_TOP_LEFT, NODE_TOP, NODE_CENTER, NODE_BOTTOM\n                let _config = {\n                    col_spacing: 2,\n                    row_spacing: 3,\n                    node_width: 15,\n                    node_height: 10\n                };\n\n                let _result = Utils.getNodeCoords(_row_index, _col_index, _position, _config);\n\n                expect(_result).toEqual([ 17, 13 ]);\n            });\n        });\n    });\n});"],"sourceRoot":"src/app/*.js"}