{"version":3,"sources":["node/node-utils-spec.js"],"names":["Utils","describe","it","_col_index","_row_index","_position","_config","col_spacing","row_spacing","node_width","node_height","_result","getNodeCoords","expect","toEqual","_node","row_index","col_index","isNodeIndexMatch","_line","aaa","bbb","updateNodeLineProperty","_expected_result","updateNodeProperty","_line1","to","active","_line2","_line3","_node1","lines","_node2","_node3","_node4","_node5","_nodes","columns","updateNodesActivateNode","jasmine","objectContaining","arrayContaining"],"mappings":"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","file":"node/node-utils-spec.js","sourcesContent":["import deepFreeze from 'deep-freeze';\n\n// local: constants\nimport {\n        NODE_TOP_LEFT,\n        NODE_TOP,\n        NODE_CENTER,\n        NODE_BOTTOM\n} from \"./node-settings\";\n\n// local: models\nimport AngularSvgNode from './node-model';\nimport AngularSvgNodeLine from '../line/line-model';\n\n// SUT\nimport * as Utils from './node-utils';\n\ndescribe(\"Node Utils\", () => {\n\n    //------------------------------------------------------------\n    // getNodeCoords\n    //------------------------------------------------------------\n\n    describe(\"getNodeCoords\", () => {\n\n        describe(\"should return correct x,y coordinates for given node\", () => {\n\n            it(\"should return 0,0 for first node 0,0\", () => {\n\n                let _col_index = 0;\n                let _row_index = 0;\n                let _position = NODE_TOP_LEFT; // NODE_TOP_LEFT, NODE_TOP, NODE_CENTER, NODE_BOTTOM\n                let _config = {\n                    col_spacing: 0,\n                    row_spacing: 0,\n                    node_width: 10,\n                    node_height: 10\n                };\n\n                let _result = Utils.getNodeCoords(_row_index, _col_index, _position, _config);\n\n                expect(_result).toEqual([ 0, 0 ]);\n            });\n\n            it(\"should take node width & height into account and return 15,10 for first node 1,1\", () => {\n\n                let _col_index = 1;\n                let _row_index = 1;\n                let _position = NODE_TOP_LEFT; // NODE_TOP_LEFT, NODE_TOP, NODE_CENTER, NODE_BOTTOM\n                let _config = {\n                    col_spacing: 0,\n                    row_spacing: 0,\n                    node_width: 15,\n                    node_height: 10\n                };\n\n                let _result = Utils.getNodeCoords(_row_index, _col_index, _position, _config);\n\n                expect(_result).toEqual([ 15, 10 ]);\n            });\n\n            it(\"should take row & column spacing into account and return 17,13 for first node 1,1\", () => {\n\n                let _col_index = 1;\n                let _row_index = 1;\n                let _position = NODE_TOP_LEFT; // NODE_TOP_LEFT, NODE_TOP, NODE_CENTER, NODE_BOTTOM\n                let _config = {\n                    col_spacing: 2,\n                    row_spacing: 3,\n                    node_width: 15,\n                    node_height: 10\n                };\n\n                let _result = Utils.getNodeCoords(_row_index, _col_index, _position, _config);\n\n                expect(_result).toEqual([ 17, 13 ]);\n            });\n        });\n    });\n\n    //------------------------------------------------------------\n    // isNodeIndexMatch (node, row_index, col_index)\n    //------------------------------------------------------------\n\n    describe(\"isNodeIndexMatch\", () => {\n\n        it(\"should return true because node matches provided indices\", () => {\n\n            let _node = {\n                row_index: 123,\n                col_index: 123\n            };\n            let _row_index = 123;\n            let _col_index = 123;\n\n            deepFreeze(_node);\n\n            let _result = Utils.isNodeIndexMatch(_node, _row_index, _col_index);\n\n            expect(_result).toEqual(true);\n        });\n\n        it(\"should return false because node's column index does not match provided indices\", () => {\n\n            let _node = {\n                row_index: 123,\n                col_index: 456\n            };\n            let _row_index = 123;\n            let _col_index = 123;\n\n            deepFreeze(_node);\n\n            let _result = Utils.isNodeIndexMatch(_node, _row_index, _col_index);\n\n            expect(_result).toEqual(false);\n        });\n\n        it(\"should return false because node's row index does not match provided indices\", () => {\n\n            let _node = {\n                row_index: 456,\n                col_index: 123\n            };\n            let _row_index = 123;\n            let _col_index = 123;\n\n            deepFreeze(_node);\n\n            let _result = Utils.isNodeIndexMatch(_node, _row_index, _col_index);\n\n            expect(_result).toEqual(false);\n        });\n    });\n\n    //------------------------------------------------------------\n    // updateNodeLineProperty\n    //-----------------------------------------------------------\n\n    describe(\"updateNodeLineProperty\", () => {\n\n        it(\"should update given property and return node line data\", () => {\n\n            let _line = new AngularSvgNodeLine({\n                aaa: \"AAA\",\n                bbb: 123\n            });\n\n            deepFreeze(_line);\n\n            let _result = Utils.updateNodeLineProperty(_line, 'aaa', \"BBB\");\n            let _expected_result = new AngularSvgNodeLine({\n                aaa: \"BBB\",\n                bbb: 123\n            });\n\n            expect(_result).toEqual(_expected_result);\n        });\n    });\n\n    //------------------------------------------------------------\n    // updateNodeProperty\n    //-----------------------------------------------------------\n\n    describe(\"updateNodeProperty\", () => {\n\n        it(\"should update given property and return node data\", () => {\n\n            let _node = new AngularSvgNode({\n                aaa: \"AAA\",\n                bbb: 123\n            });\n\n            deepFreeze(_node);\n\n            let _result = Utils.updateNodeProperty(_node, 'aaa', \"BBB\");\n            let _expected_result = new AngularSvgNode({\n                aaa: \"BBB\",\n                bbb: 123\n            });\n\n            expect(_result).toEqual(_expected_result);\n        });\n    });\n\n    //------------------------------------------------------------\n    // updateNodesActivateNode\n    //------------------------------------------------------------\n\n    describe(\"updateNodesActivateNode\", () => {\n\n        it(\"should set targeted node's 'active' property to true and return updated node array\", () => {\n\n            let _line1 = new AngularSvgNodeLine({ to: [ 2, 1 ], active: true });\n            let _line2 = new AngularSvgNodeLine({ to: [ 0, 1 ], active: true });\n            let _line3 = new AngularSvgNodeLine({ to: [ 1, 1 ], active: false });\n            let _node1 = new AngularSvgNode({ row_index: 0, col_index: 0, active: false, lines: [ _line1 ] });\n            let _node2 = new AngularSvgNode({ row_index: 0, col_index: 1, active: false, lines: [ _line2, _line3 ] });\n            let _node3 = new AngularSvgNode({ row_index: 1, col_index: 0, active: false });\n            let _node4 = new AngularSvgNode({ row_index: 1, col_index: 1, active: false });\n            let _node5 = new AngularSvgNode({ row_index: 1, col_index: 2, active: false });\n\n            let _nodes = [\n                { columns: [ _node1, _node2 ] },\n                { columns: [ _node3, _node4, _node5 ] }\n            ];\n\n            let _row_index = 0;\n            let _col_index = 1;\n\n            deepFreeze(_nodes);\n\n            let _result = Utils.updateNodesActivateNode(_nodes, _row_index, _col_index);\n\n            // should leave non targeted node's unchanged\n\n            expect(_result[ _node1.row_index ].columns[ _node1.col_index ]).toEqual(jasmine.objectContaining(_node1));\n\n            // should set 'active' property to true for targeted node\n\n            expect(_result[ _row_index ].columns[ _col_index ]).toEqual(jasmine.objectContaining({\n                row_index: _row_index,\n                col_index: _col_index,\n                active: true\n            }));\n\n            // should set 'active' property to true for all targeted node's lines\n\n            expect(_result[ _row_index ].columns[ _col_index ].lines).toEqual(jasmine.arrayContaining([\n                jasmine.objectContaining({\n                    to: [ 0, 1 ],\n                    active: true\n                }),\n                jasmine.objectContaining({\n                    to: [ 1, 1 ],\n                    active: true\n                })\n            ]));\n\n            // should set 'active' property to true for all node's that targeted node's lines connect to\n\n            expect(_result[ _line2.to[1] ].columns[ _line2.to[0] ]).toEqual(jasmine.objectContaining({\n                row_index: _line2.to[1],\n                col_index: _line2.to[0],\n                active: true\n            }));\n\n            expect(_result[ _line3.to[1] ].columns[ _line3.to[0] ]).toEqual(jasmine.objectContaining({\n                row_index: _line3.to[1],\n                col_index: _line3.to[0],\n                active: true\n            }));\n        });\n    });\n});"],"sourceRoot":"src/app/*.js"}